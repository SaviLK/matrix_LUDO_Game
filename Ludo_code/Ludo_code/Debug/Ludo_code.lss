
Ludo_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800100  00001a9a  00001b2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  0080020a  0080020a  00001c38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000298a  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008bf  00000000  00000000  00004796  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018ba  00000000  00000000  00005055  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  00006910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a57  00000000  00000000  00006d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c2f  00000000  00000000  000077ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000093da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e9       	ldi	r30, 0x9A	; 154
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 30       	cpi	r26, 0x0A	; 10
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	aa e0       	ldi	r26, 0x0A	; 10
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 32       	cpi	r26, 0x29	; 41
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <main>
      9e:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZL17MAX7219_write_8X8h>:
	return;

	for (i = 0; i < 8; ++i) {
		MAX7219_set_pixel_7SEG(i, column, !!((value >> i) & 0x01));
	}
}
      a6:	00 00       	nop
      a8:	98 e0       	ldi	r25, 0x08	; 8
      aa:	28 98       	cbi	0x05, 0	; 5
      ac:	00 00       	nop
      ae:	88 23       	and	r24, r24
      b0:	14 f4       	brge	.+4      	; 0xb6 <_ZL17MAX7219_write_8X8h+0x10>
      b2:	2a 9a       	sbi	0x05, 2	; 5
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <_ZL17MAX7219_write_8X8h+0x12>
      b6:	2a 98       	cbi	0x05, 2	; 5
      b8:	28 9a       	sbi	0x05, 0	; 5
      ba:	88 0f       	add	r24, r24
      bc:	91 50       	subi	r25, 0x01	; 1
      be:	a9 f7       	brne	.-22     	; 0xaa <_ZL17MAX7219_write_8X8h+0x4>
      c0:	08 95       	ret

000000c2 <_ZL16MAX7219_send_8X8hh>:
      c2:	cf 93       	push	r28
      c4:	c6 2f       	mov	r28, r22
      c6:	29 9a       	sbi	0x05, 1	; 5
      c8:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZL17MAX7219_write_8X8h>
      cc:	8c 2f       	mov	r24, r28
      ce:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZL17MAX7219_write_8X8h>
      d2:	29 98       	cbi	0x05, 1	; 5
      d4:	00 00       	nop
      d6:	29 9a       	sbi	0x05, 1	; 5
      d8:	cf 91       	pop	r28
      da:	08 95       	ret

000000dc <_ZL18MAX7219_write_7SEGh>:
      dc:	00 00       	nop
      de:	98 e0       	ldi	r25, 0x08	; 8
      e0:	2b 98       	cbi	0x05, 3	; 5
      e2:	00 00       	nop
      e4:	88 23       	and	r24, r24
      e6:	14 f4       	brge	.+4      	; 0xec <_ZL18MAX7219_write_7SEGh+0x10>
      e8:	2d 9a       	sbi	0x05, 5	; 5
      ea:	01 c0       	rjmp	.+2      	; 0xee <_ZL18MAX7219_write_7SEGh+0x12>
      ec:	2d 98       	cbi	0x05, 5	; 5
      ee:	2b 9a       	sbi	0x05, 3	; 5
      f0:	88 0f       	add	r24, r24
      f2:	91 50       	subi	r25, 0x01	; 1
      f4:	a9 f7       	brne	.-22     	; 0xe0 <_ZL18MAX7219_write_7SEGh+0x4>
      f6:	08 95       	ret

000000f8 <_ZL17MAX7219_send_7SEGhh>:
      f8:	cf 93       	push	r28
      fa:	c6 2f       	mov	r28, r22
      fc:	2c 9a       	sbi	0x05, 4	; 5
      fe:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZL18MAX7219_write_7SEGh>
     102:	8c 2f       	mov	r24, r28
     104:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZL18MAX7219_write_7SEGh>
     108:	2c 98       	cbi	0x05, 4	; 5
     10a:	00 00       	nop
     10c:	2c 9a       	sbi	0x05, 4	; 5
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <_Z16MAX7219_init_8X8v>:
     112:	84 b1       	in	r24, 0x04	; 4
     114:	87 60       	ori	r24, 0x07	; 7
     116:	84 b9       	out	0x04, r24	; 4
     118:	60 e0       	ldi	r22, 0x00	; 0
     11a:	89 e0       	ldi	r24, 0x09	; 9
     11c:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZL16MAX7219_send_8X8hh>
     120:	67 e0       	ldi	r22, 0x07	; 7
     122:	8b e0       	ldi	r24, 0x0B	; 11
     124:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZL16MAX7219_send_8X8hh>
     128:	6f e0       	ldi	r22, 0x0F	; 15
     12a:	8a e0       	ldi	r24, 0x0A	; 10
     12c:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZL16MAX7219_send_8X8hh>
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	8f e0       	ldi	r24, 0x0F	; 15
     134:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZL16MAX7219_send_8X8hh>
     138:	61 e0       	ldi	r22, 0x01	; 1
     13a:	8c e0       	ldi	r24, 0x0C	; 12
     13c:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZL16MAX7219_send_8X8hh>
     140:	08 95       	ret

00000142 <_Z21MAX7219_set_pixel_8X8hhb>:
     142:	88 30       	cpi	r24, 0x08	; 8
     144:	18 f5       	brcc	.+70     	; 0x18c <_Z21MAX7219_set_pixel_8X8hhb+0x4a>
     146:	68 30       	cpi	r22, 0x08	; 8
     148:	08 f5       	brcc	.+66     	; 0x18c <_Z21MAX7219_set_pixel_8X8hhb+0x4a>
     14a:	21 e0       	ldi	r18, 0x01	; 1
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	02 c0       	rjmp	.+4      	; 0x154 <_Z21MAX7219_set_pixel_8X8hhb+0x12>
     150:	22 0f       	add	r18, r18
     152:	33 1f       	adc	r19, r19
     154:	6a 95       	dec	r22
     156:	e2 f7       	brpl	.-8      	; 0x150 <_Z21MAX7219_set_pixel_8X8hhb+0xe>
     158:	44 23       	and	r20, r20
     15a:	41 f0       	breq	.+16     	; 0x16c <_Z21MAX7219_set_pixel_8X8hhb+0x2a>
     15c:	e8 2f       	mov	r30, r24
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	ef 5d       	subi	r30, 0xDF	; 223
     162:	fd 4f       	sbci	r31, 0xFD	; 253
     164:	90 81       	ld	r25, Z
     166:	29 2b       	or	r18, r25
     168:	20 83       	st	Z, r18
     16a:	08 c0       	rjmp	.+16     	; 0x17c <_Z21MAX7219_set_pixel_8X8hhb+0x3a>
     16c:	e8 2f       	mov	r30, r24
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	ef 5d       	subi	r30, 0xDF	; 223
     172:	fd 4f       	sbci	r31, 0xFD	; 253
     174:	20 95       	com	r18
     176:	90 81       	ld	r25, Z
     178:	29 23       	and	r18, r25
     17a:	20 83       	st	Z, r18
     17c:	e8 2f       	mov	r30, r24
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	ef 5d       	subi	r30, 0xDF	; 223
     182:	fd 4f       	sbci	r31, 0xFD	; 253
     184:	60 81       	ld	r22, Z
     186:	8f 5f       	subi	r24, 0xFF	; 255
     188:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZL16MAX7219_send_8X8hh>
     18c:	08 95       	ret

0000018e <_Z22MAX7219_set_column_8X8hh>:
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	88 30       	cpi	r24, 0x08	; 8
     19a:	a8 f4       	brcc	.+42     	; 0x1c6 <_Z22MAX7219_set_column_8X8hh+0x38>
     19c:	f8 2e       	mov	r15, r24
     19e:	c0 e0       	ldi	r28, 0x00	; 0
     1a0:	d0 e0       	ldi	r29, 0x00	; 0
     1a2:	06 2f       	mov	r16, r22
     1a4:	10 e0       	ldi	r17, 0x00	; 0
     1a6:	a8 01       	movw	r20, r16
     1a8:	8c 2f       	mov	r24, r28
     1aa:	0c 2e       	mov	r0, r28
     1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <_Z22MAX7219_set_column_8X8hh+0x24>
     1ae:	55 95       	asr	r21
     1b0:	47 95       	ror	r20
     1b2:	0a 94       	dec	r0
     1b4:	e2 f7       	brpl	.-8      	; 0x1ae <_Z22MAX7219_set_column_8X8hh+0x20>
     1b6:	41 70       	andi	r20, 0x01	; 1
     1b8:	6f 2d       	mov	r22, r15
     1ba:	0e 94 a1 00 	call	0x142	; 0x142 <_Z21MAX7219_set_pixel_8X8hhb>
     1be:	21 96       	adiw	r28, 0x01	; 1
     1c0:	c8 30       	cpi	r28, 0x08	; 8
     1c2:	d1 05       	cpc	r29, r1
     1c4:	81 f7       	brne	.-32     	; 0x1a6 <_Z22MAX7219_set_column_8X8hh+0x18>
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	ff 90       	pop	r15
     1d0:	08 95       	ret

000001d2 <_Z25MAX7219_set_intensity_8X8h>:
     1d2:	80 31       	cpi	r24, 0x10	; 16
     1d4:	20 f4       	brcc	.+8      	; 0x1de <_Z25MAX7219_set_intensity_8X8h+0xc>
     1d6:	68 2f       	mov	r22, r24
     1d8:	8a e0       	ldi	r24, 0x0A	; 10
     1da:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZL16MAX7219_send_8X8hh>
     1de:	08 95       	ret

000001e0 <_Z17MAX7219_clear_8X8v>:
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
     1e6:	01 e2       	ldi	r16, 0x21	; 33
     1e8:	12 e0       	ldi	r17, 0x02	; 2
     1ea:	c1 e0       	ldi	r28, 0x01	; 1
     1ec:	f8 01       	movw	r30, r16
     1ee:	80 81       	ld	r24, Z
     1f0:	88 23       	and	r24, r24
     1f2:	29 f0       	breq	.+10     	; 0x1fe <_Z17MAX7219_clear_8X8v+0x1e>
     1f4:	10 82       	st	Z, r1
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	8c 2f       	mov	r24, r28
     1fa:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZL16MAX7219_send_8X8hh>
     1fe:	cf 5f       	subi	r28, 0xFF	; 255
     200:	0f 5f       	subi	r16, 0xFF	; 255
     202:	1f 4f       	sbci	r17, 0xFF	; 255
     204:	c9 30       	cpi	r28, 0x09	; 9
     206:	91 f7       	brne	.-28     	; 0x1ec <_Z17MAX7219_clear_8X8v+0xc>
     208:	cf 91       	pop	r28
     20a:	1f 91       	pop	r17
     20c:	0f 91       	pop	r16
     20e:	08 95       	ret

00000210 <_Z17MAX7219_init_7SEGv>:
     210:	84 b1       	in	r24, 0x04	; 4
     212:	88 63       	ori	r24, 0x38	; 56
     214:	84 b9       	out	0x04, r24	; 4
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	89 e0       	ldi	r24, 0x09	; 9
     21a:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZL17MAX7219_send_7SEGhh>
     21e:	67 e0       	ldi	r22, 0x07	; 7
     220:	8b e0       	ldi	r24, 0x0B	; 11
     222:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZL17MAX7219_send_7SEGhh>
     226:	6f e0       	ldi	r22, 0x0F	; 15
     228:	8a e0       	ldi	r24, 0x0A	; 10
     22a:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZL17MAX7219_send_7SEGhh>
     22e:	60 e0       	ldi	r22, 0x00	; 0
     230:	8f e0       	ldi	r24, 0x0F	; 15
     232:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZL17MAX7219_send_7SEGhh>
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	8c e0       	ldi	r24, 0x0C	; 12
     23a:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZL17MAX7219_send_7SEGhh>
     23e:	08 95       	ret

00000240 <_Z20MAX7219_set_row_7SEGhh>:
     240:	88 30       	cpi	r24, 0x08	; 8
     242:	40 f4       	brcc	.+16     	; 0x254 <_Z20MAX7219_set_row_7SEGhh+0x14>
     244:	e8 2f       	mov	r30, r24
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	e7 5e       	subi	r30, 0xE7	; 231
     24a:	fd 4f       	sbci	r31, 0xFD	; 253
     24c:	60 83       	st	Z, r22
     24e:	8f 5f       	subi	r24, 0xFF	; 255
     250:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZL17MAX7219_send_7SEGhh>
     254:	08 95       	ret

00000256 <_Z26MAX7219_set_intensity_7SEGh>:

void MAX7219_set_intensity_7SEG(uint8_t value)
{

	if (value > 15)
     256:	80 31       	cpi	r24, 0x10	; 16
     258:	20 f4       	brcc	.+8      	; 0x262 <_Z26MAX7219_set_intensity_7SEGh+0xc>
     25a:	68 2f       	mov	r22, r24
	return;

	MAX7219_send_7SEG(MAX7219_REG_INTENSITY, value);
     25c:	8a e0       	ldi	r24, 0x0A	; 10
     25e:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZL17MAX7219_send_7SEGhh>
     262:	08 95       	ret

00000264 <_Z18MAX7219_clear_7SEGv>:
}

void MAX7219_clear_7SEG(void)
{
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	cf 93       	push	r28
     26a:	09 e1       	ldi	r16, 0x19	; 25
     26c:	12 e0       	ldi	r17, 0x02	; 2
     26e:	c1 e0       	ldi	r28, 0x01	; 1
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		if (MAX7219_state_7SEG[i]) {
     270:	f8 01       	movw	r30, r16
     272:	80 81       	ld	r24, Z
     274:	88 23       	and	r24, r24
     276:	29 f0       	breq	.+10     	; 0x282 <_Z18MAX7219_clear_7SEGv+0x1e>
			MAX7219_state_7SEG[i] = 0;
     278:	10 82       	st	Z, r1
			MAX7219_send_7SEG(i + 1, 0);
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	8c 2f       	mov	r24, r28
     27e:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZL17MAX7219_send_7SEGhh>
     282:	cf 5f       	subi	r28, 0xFF	; 255
     284:	0f 5f       	subi	r16, 0xFF	; 255
     286:	1f 4f       	sbci	r17, 0xFF	; 255

void MAX7219_clear_7SEG(void)
{
	uint8_t i;

	for (i = 0; i < 8; ++i) {
     288:	c9 30       	cpi	r28, 0x09	; 9
     28a:	91 f7       	brne	.-28     	; 0x270 <_Z18MAX7219_clear_7SEGv+0xc>
		if (MAX7219_state_7SEG[i]) {
			MAX7219_state_7SEG[i] = 0;
			MAX7219_send_7SEG(i + 1, 0);
		}
	}
}
     28c:	cf 91       	pop	r28
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	08 95       	ret

00000294 <_Z10USART_INITv>:

//Initialize USART communication
void USART_INIT()
{
	//Set Baud rates
	UBRR0H = Prescaler >> 8;
     294:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = Prescaler;
     298:	83 e3       	ldi	r24, 0x33	; 51
     29a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     29e:	88 e1       	ldi	r24, 0x18	; 24
     2a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	//Set Frame format: Asynchronous, 8bit data, 1 stop bit
	UCSR0C = (0<<UMSEL00)|(3<<UCSZ00)|(0<<USBS0)|(0<<UPM00);
     2a4:	86 e0       	ldi	r24, 0x06	; 6
     2a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     2aa:	08 95       	ret

000002ac <_Z14USART_Transmith>:


//USART Transmit data
void USART_Transmit(uint8_t Data)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
     2ac:	e0 ec       	ldi	r30, 0xC0	; 192
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	90 81       	ld	r25, Z
     2b2:	95 ff       	sbrs	r25, 5
     2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <_Z14USART_Transmith+0x4>
	UDR0 = Data;
     2b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2ba:	08 95       	ret

000002bc <_Z13USART_Receivev>:

//USART receive data
uint8_t USART_Receive()
{
	uint8_t DataByte;
	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
     2bc:	e0 ec       	ldi	r30, 0xC0	; 192
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	88 23       	and	r24, r24
     2c4:	ec f7       	brge	.-6      	; 0x2c0 <_Z13USART_Receivev+0x4>
	DataByte = UDR0 ;
     2c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return DataByte;
}
     2ca:	08 95       	ret

000002cc <_Z11update_Dispv>:
	{0,0,0,0,0,1,1,1}};
		

/*Function to update display*/
void update_Disp()
{
     2cc:	ef 92       	push	r14
     2ce:	ff 92       	push	r15
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	0f 2e       	mov	r0, r31
     2da:	f0 e8       	ldi	r31, 0x80	; 128
     2dc:	ef 2e       	mov	r14, r31
     2de:	f1 e0       	ldi	r31, 0x01	; 1
     2e0:	ff 2e       	mov	r15, r31
     2e2:	f0 2d       	mov	r31, r0
     2e4:	d0 e0       	ldi	r29, 0x00	; 0
     2e6:	87 01       	movw	r16, r14
     2e8:	c0 e0       	ldi	r28, 0x00	; 0
	for (int i=0;i<8;i++)
	{
		for (int j=0; j<8; j++)
		{
			if (Disp_Array[i][j]>=1)
     2ea:	f8 01       	movw	r30, r16
     2ec:	81 91       	ld	r24, Z+
     2ee:	91 91       	ld	r25, Z+
     2f0:	8f 01       	movw	r16, r30
     2f2:	18 16       	cp	r1, r24
     2f4:	19 06       	cpc	r1, r25
     2f6:	2c f4       	brge	.+10     	; 0x302 <_Z11update_Dispv+0x36>
			{
				MAX7219_set_pixel_8X8(i,j,true);
     2f8:	41 e0       	ldi	r20, 0x01	; 1
     2fa:	6c 2f       	mov	r22, r28
     2fc:	8d 2f       	mov	r24, r29
     2fe:	0e 94 a1 00 	call	0x142	; 0x142 <_Z21MAX7219_set_pixel_8X8hhb>
     302:	cf 5f       	subi	r28, 0xFF	; 255
/*Function to update display*/
void update_Disp()
{
	for (int i=0;i<8;i++)
	{
		for (int j=0; j<8; j++)
     304:	c8 30       	cpi	r28, 0x08	; 8
     306:	89 f7       	brne	.-30     	; 0x2ea <_Z11update_Dispv+0x1e>
     308:	f0 e1       	ldi	r31, 0x10	; 16
     30a:	ef 0e       	add	r14, r31
     30c:	f1 1c       	adc	r15, r1
     30e:	df 5f       	subi	r29, 0xFF	; 255
		

/*Function to update display*/
void update_Disp()
{
	for (int i=0;i<8;i++)
     310:	d8 30       	cpi	r29, 0x08	; 8
     312:	49 f7       	brne	.-46     	; 0x2e6 <_Z11update_Dispv+0x1a>
			{
				MAX7219_set_pixel_8X8(i,j,true);
			}
		}
	}
}
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	1f 91       	pop	r17
     31a:	0f 91       	pop	r16
     31c:	ff 90       	pop	r15
     31e:	ef 90       	pop	r14
     320:	08 95       	ret

00000322 <_Z14Display_numberv>:

//Display the numbers to select no of players playing the game
void Display_number()
{
     322:	ef 92       	push	r14
     324:	ff 92       	push	r15
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	0f 2e       	mov	r0, r31
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	ef 2e       	mov	r14, r31
     334:	f1 e0       	ldi	r31, 0x01	; 1
     336:	ff 2e       	mov	r15, r31
     338:	f0 2d       	mov	r31, r0
     33a:	d0 e0       	ldi	r29, 0x00	; 0
     33c:	87 01       	movw	r16, r14
     33e:	c0 e0       	ldi	r28, 0x00	; 0
	for (int i=0;i<8;i++)
	{
		for (int j=0; j<8; j++)
		{
			if (Disp_Number[i][j]>=1)
     340:	f8 01       	movw	r30, r16
     342:	81 91       	ld	r24, Z+
     344:	91 91       	ld	r25, Z+
     346:	8f 01       	movw	r16, r30
     348:	18 16       	cp	r1, r24
     34a:	19 06       	cpc	r1, r25
     34c:	2c f4       	brge	.+10     	; 0x358 <_Z14Display_numberv+0x36>
			{
				MAX7219_set_pixel_8X8(i,j,true);
     34e:	41 e0       	ldi	r20, 0x01	; 1
     350:	6c 2f       	mov	r22, r28
     352:	8d 2f       	mov	r24, r29
     354:	0e 94 a1 00 	call	0x142	; 0x142 <_Z21MAX7219_set_pixel_8X8hhb>
     358:	cf 5f       	subi	r28, 0xFF	; 255
//Display the numbers to select no of players playing the game
void Display_number()
{
	for (int i=0;i<8;i++)
	{
		for (int j=0; j<8; j++)
     35a:	c8 30       	cpi	r28, 0x08	; 8
     35c:	89 f7       	brne	.-30     	; 0x340 <_Z14Display_numberv+0x1e>
     35e:	f0 e1       	ldi	r31, 0x10	; 16
     360:	ef 0e       	add	r14, r31
     362:	f1 1c       	adc	r15, r1
     364:	df 5f       	subi	r29, 0xFF	; 255
}

//Display the numbers to select no of players playing the game
void Display_number()
{
	for (int i=0;i<8;i++)
     366:	d8 30       	cpi	r29, 0x08	; 8
     368:	49 f7       	brne	.-46     	; 0x33c <_Z14Display_numberv+0x1a>
			{
				MAX7219_set_pixel_8X8(i,j,true);
			}
		}
	}
}
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	1f 91       	pop	r17
     370:	0f 91       	pop	r16
     372:	ff 90       	pop	r15
     374:	ef 90       	pop	r14
     376:	08 95       	ret

00000378 <_Z8set_Pathib>:


*/
void set_Path(int point, bool status)
{
	if (status == true)		//Turn on related pixels on 8x8 display
     378:	66 23       	and	r22, r22
     37a:	09 f4       	brne	.+2      	; 0x37e <_Z8set_Pathib+0x6>
     37c:	41 c1       	rjmp	.+642    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
	{
		if(point == 1)
     37e:	81 30       	cpi	r24, 0x01	; 1
     380:	91 05       	cpc	r25, r1
     382:	39 f4       	brne	.+14     	; 0x392 <_Z8set_Pathib+0x1a>
		{
			Disp_Array[0][5] = 1;
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <Disp_Array+0xb>
     38c:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <Disp_Array+0xa>
     390:	08 95       	ret
		}
		
		else if (point == 2)
     392:	82 30       	cpi	r24, 0x02	; 2
     394:	91 05       	cpc	r25, r1
     396:	39 f4       	brne	.+14     	; 0x3a6 <_Z8set_Pathib+0x2e>
		{
			Disp_Array[1][5] = 1;
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <Disp_Array+0x1b>
     3a0:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <Disp_Array+0x1a>
     3a4:	08 95       	ret
		}
		
		else if (point == 3)
     3a6:	83 30       	cpi	r24, 0x03	; 3
     3a8:	91 05       	cpc	r25, r1
     3aa:	39 f4       	brne	.+14     	; 0x3ba <_Z8set_Pathib+0x42>
		{
			Disp_Array[2][5] = 1;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <Disp_Array+0x2b>
     3b4:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <Disp_Array+0x2a>
     3b8:	08 95       	ret
		}
		
		else if (point == 4)
     3ba:	84 30       	cpi	r24, 0x04	; 4
     3bc:	91 05       	cpc	r25, r1
     3be:	39 f4       	brne	.+14     	; 0x3ce <_Z8set_Pathib+0x56>
		{
			Disp_Array[2][6] = 1;
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <Disp_Array+0x2d>
     3c8:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <Disp_Array+0x2c>
     3cc:	08 95       	ret
		}
		
		else if (point == 5)
     3ce:	85 30       	cpi	r24, 0x05	; 5
     3d0:	91 05       	cpc	r25, r1
     3d2:	39 f4       	brne	.+14     	; 0x3e2 <_Z8set_Pathib+0x6a>
		{
			Disp_Array[2][7] = 1;
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <Disp_Array+0x2f>
     3dc:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <Disp_Array+0x2e>
     3e0:	08 95       	ret
		}
		
		else if (point == 6)
     3e2:	86 30       	cpi	r24, 0x06	; 6
     3e4:	91 05       	cpc	r25, r1
     3e6:	39 f4       	brne	.+14     	; 0x3f6 <_Z8set_Pathib+0x7e>
		{
			Disp_Array[3][7] = 1;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <Disp_Array+0x3f>
     3f0:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <Disp_Array+0x3e>
     3f4:	08 95       	ret
		}
		
		else if (point == 7)
     3f6:	87 30       	cpi	r24, 0x07	; 7
     3f8:	91 05       	cpc	r25, r1
     3fa:	39 f4       	brne	.+14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		{
			Disp_Array[4][7] = 1;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <Disp_Array+0x4f>
     404:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <Disp_Array+0x4e>
     408:	08 95       	ret
		}
		
		else if (point == 8)
     40a:	88 30       	cpi	r24, 0x08	; 8
     40c:	91 05       	cpc	r25, r1
     40e:	39 f4       	brne	.+14     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		{
			Disp_Array[5][7] = 1;
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <Disp_Array+0x5f>
     418:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <Disp_Array+0x5e>
     41c:	08 95       	ret
		}
		
		else if (point == 9)
     41e:	89 30       	cpi	r24, 0x09	; 9
     420:	91 05       	cpc	r25, r1
     422:	39 f4       	brne	.+14     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		{
			Disp_Array[5][6] = 1;
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <Disp_Array+0x5d>
     42c:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <Disp_Array+0x5c>
     430:	08 95       	ret
		}
		
		else if (point == 10)
     432:	8a 30       	cpi	r24, 0x0A	; 10
     434:	91 05       	cpc	r25, r1
     436:	39 f4       	brne	.+14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		{
			Disp_Array[5][5] = 1;
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <Disp_Array+0x5b>
     440:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <Disp_Array+0x5a>
     444:	08 95       	ret
		}
		
		else if (point == 11)
     446:	8b 30       	cpi	r24, 0x0B	; 11
     448:	91 05       	cpc	r25, r1
     44a:	39 f4       	brne	.+14     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		{
			Disp_Array[6][5] = 1;
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <Disp_Array+0x6b>
     454:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <Disp_Array+0x6a>
     458:	08 95       	ret
		}
		
		else if (point == 12)
     45a:	8c 30       	cpi	r24, 0x0C	; 12
     45c:	91 05       	cpc	r25, r1
     45e:	39 f4       	brne	.+14     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
		{
			Disp_Array[7][5] = 1;
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <Disp_Array+0x7b>
     468:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <Disp_Array+0x7a>
     46c:	08 95       	ret
		}
		
		else if (point == 13)
     46e:	8d 30       	cpi	r24, 0x0D	; 13
     470:	91 05       	cpc	r25, r1
     472:	39 f4       	brne	.+14     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
		{
			Disp_Array[7][4] = 1;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <Disp_Array+0x79>
     47c:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <Disp_Array+0x78>
     480:	08 95       	ret
		}
		
		else if (point == 14)
     482:	8e 30       	cpi	r24, 0x0E	; 14
     484:	91 05       	cpc	r25, r1
     486:	39 f4       	brne	.+14     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		{
			Disp_Array[7][3] = 1;
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <Disp_Array+0x77>
     490:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <Disp_Array+0x76>
     494:	08 95       	ret
		}
		
		else if (point == 15)
     496:	8f 30       	cpi	r24, 0x0F	; 15
     498:	91 05       	cpc	r25, r1
     49a:	39 f4       	brne	.+14     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
		{
			Disp_Array[7][2] = 1;
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <Disp_Array+0x75>
     4a4:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <Disp_Array+0x74>
     4a8:	08 95       	ret
		}
		
		else if (point == 16)
     4aa:	80 31       	cpi	r24, 0x10	; 16
     4ac:	91 05       	cpc	r25, r1
     4ae:	39 f4       	brne	.+14     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
		{
			Disp_Array[6][2] = 1;
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <Disp_Array+0x65>
     4b8:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <Disp_Array+0x64>
     4bc:	08 95       	ret
		}
		
		else if (point == 17)
     4be:	81 31       	cpi	r24, 0x11	; 17
     4c0:	91 05       	cpc	r25, r1
     4c2:	39 f4       	brne	.+14     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
		{
			Disp_Array[5][2] = 1;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <Disp_Array+0x55>
     4cc:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <Disp_Array+0x54>
     4d0:	08 95       	ret
		}
		
		else if (point == 18)
     4d2:	82 31       	cpi	r24, 0x12	; 18
     4d4:	91 05       	cpc	r25, r1
     4d6:	39 f4       	brne	.+14     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
		{
			Disp_Array[5][1] = 1;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <Disp_Array+0x53>
     4e0:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <Disp_Array+0x52>
     4e4:	08 95       	ret
		}
		
		else if (point == 19)
     4e6:	83 31       	cpi	r24, 0x13	; 19
     4e8:	91 05       	cpc	r25, r1
     4ea:	39 f4       	brne	.+14     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
		{
			Disp_Array[5][0] = 1;
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <Disp_Array+0x51>
     4f4:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <Disp_Array+0x50>
     4f8:	08 95       	ret
		}
		
		else if (point == 20)
     4fa:	84 31       	cpi	r24, 0x14	; 20
     4fc:	91 05       	cpc	r25, r1
     4fe:	39 f4       	brne	.+14     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
		{
			Disp_Array[4][0] = 1;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <Disp_Array+0x41>
     508:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <Disp_Array+0x40>
     50c:	08 95       	ret
		}
		
		else if (point == 21)
     50e:	85 31       	cpi	r24, 0x15	; 21
     510:	91 05       	cpc	r25, r1
     512:	39 f4       	brne	.+14     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
		{
			Disp_Array[3][0] = 1;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <Disp_Array+0x31>
     51c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <Disp_Array+0x30>
     520:	08 95       	ret
		}
		
		else if (point == 22)
     522:	86 31       	cpi	r24, 0x16	; 22
     524:	91 05       	cpc	r25, r1
     526:	39 f4       	brne	.+14     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
		{
			Disp_Array[2][0] = 1;
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <Disp_Array+0x21>
     530:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <Disp_Array+0x20>
     534:	08 95       	ret
		}
		
		else if (point == 23)
     536:	87 31       	cpi	r24, 0x17	; 23
     538:	91 05       	cpc	r25, r1
     53a:	39 f4       	brne	.+14     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
		{
			Disp_Array[2][1] = 1;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <Disp_Array+0x23>
     544:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <Disp_Array+0x22>
     548:	08 95       	ret
		}
		
		else if (point == 24)
     54a:	88 31       	cpi	r24, 0x18	; 24
     54c:	91 05       	cpc	r25, r1
     54e:	39 f4       	brne	.+14     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
		{
			Disp_Array[2][2] = 1;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <Disp_Array+0x25>
     558:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <Disp_Array+0x24>
     55c:	08 95       	ret
		}
		
		else if (point == 25)
     55e:	89 31       	cpi	r24, 0x19	; 25
     560:	91 05       	cpc	r25, r1
     562:	39 f4       	brne	.+14     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
		{
			Disp_Array[1][2] = 1;
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <Disp_Array+0x15>
     56c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <Disp_Array+0x14>
     570:	08 95       	ret
		}
		
		else if (point == 26)
     572:	8a 31       	cpi	r24, 0x1A	; 26
     574:	91 05       	cpc	r25, r1
     576:	39 f4       	brne	.+14     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
		{
			Disp_Array[0][2] = 1;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <Disp_Array+0x5>
     580:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <Disp_Array+0x4>
     584:	08 95       	ret
		}
		
		else if (point == 27)
     586:	8b 31       	cpi	r24, 0x1B	; 27
     588:	91 05       	cpc	r25, r1
     58a:	39 f4       	brne	.+14     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
		{
			Disp_Array[0][3] = 1;
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <Disp_Array+0x7>
     594:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <Disp_Array+0x6>
     598:	08 95       	ret
		}
		
		else if (point == 28)
     59a:	8c 31       	cpi	r24, 0x1C	; 28
     59c:	91 05       	cpc	r25, r1
     59e:	39 f4       	brne	.+14     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
		{
			Disp_Array[0][4] = 1;
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <Disp_Array+0x9>
     5a8:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Disp_Array+0x8>
     5ac:	08 95       	ret
		}
		
		else if (point == 101)     //position of player 01 in yard
     5ae:	85 36       	cpi	r24, 0x65	; 101
     5b0:	91 05       	cpc	r25, r1
     5b2:	39 f4       	brne	.+14     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
		{
			Disp_Array[0][6] = 1;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <Disp_Array+0xd>
     5bc:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <Disp_Array+0xc>
     5c0:	08 95       	ret
		}
		
		else if (point == 102)		// position of player 02 in yard (in 4 player mode)
     5c2:	86 36       	cpi	r24, 0x66	; 102
     5c4:	91 05       	cpc	r25, r1
     5c6:	39 f4       	brne	.+14     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
		{
			Disp_Array[6][7] = 1;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <Disp_Array+0x6f>
     5d0:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <Disp_Array+0x6e>
     5d4:	08 95       	ret
		}
		
		else if (point == 103)		//position of player 03 in yard (in 4 player mode) player 02 in 2 player mode
     5d6:	87 36       	cpi	r24, 0x67	; 103
     5d8:	91 05       	cpc	r25, r1
     5da:	39 f4       	brne	.+14     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
		{
			Disp_Array[7][1] = 1;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <Disp_Array+0x73>
     5e4:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <Disp_Array+0x72>
     5e8:	08 95       	ret
		}
		
		else if (point == 104)		// position of player 04 in yard (in 4 player mode)
     5ea:	88 36       	cpi	r24, 0x68	; 104
     5ec:	91 05       	cpc	r25, r1
     5ee:	09 f0       	breq	.+2      	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
     5f0:	06 c1       	rjmp	.+524    	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
		{
			Disp_Array[1][0] = 1;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <Disp_Array+0x11>
     5fa:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <Disp_Array+0x10>
     5fe:	08 95       	ret
	
	
	
	else //Turn off ralated pixels in 8x8 display
	{
		if(point == 1)
     600:	81 30       	cpi	r24, 0x01	; 1
     602:	91 05       	cpc	r25, r1
     604:	29 f4       	brne	.+10     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
		{
			Disp_Array[0][5] = 0;
     606:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <Disp_Array+0xb>
     60a:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <Disp_Array+0xa>
     60e:	08 95       	ret
		}
		
		else if (point == 2)
     610:	82 30       	cpi	r24, 0x02	; 2
     612:	91 05       	cpc	r25, r1
     614:	29 f4       	brne	.+10     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
		{
			Disp_Array[1][5] = 0;
     616:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Disp_Array+0x1b>
     61a:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <Disp_Array+0x1a>
     61e:	08 95       	ret
		}
		
		else if (point == 3)
     620:	83 30       	cpi	r24, 0x03	; 3
     622:	91 05       	cpc	r25, r1
     624:	29 f4       	brne	.+10     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
		{
			Disp_Array[2][5] = 0;
     626:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <Disp_Array+0x2b>
     62a:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <Disp_Array+0x2a>
     62e:	08 95       	ret
		}
		
		else if (point == 4)
     630:	84 30       	cpi	r24, 0x04	; 4
     632:	91 05       	cpc	r25, r1
     634:	29 f4       	brne	.+10     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
		{
			Disp_Array[2][6] = 0;
     636:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <Disp_Array+0x2d>
     63a:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <Disp_Array+0x2c>
     63e:	08 95       	ret
		}
		
		else if (point == 5)
     640:	85 30       	cpi	r24, 0x05	; 5
     642:	91 05       	cpc	r25, r1
     644:	29 f4       	brne	.+10     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
		{
			Disp_Array[2][7] = 0;
     646:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <Disp_Array+0x2f>
     64a:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <Disp_Array+0x2e>
     64e:	08 95       	ret
		}
		
		else if (point == 6)
     650:	86 30       	cpi	r24, 0x06	; 6
     652:	91 05       	cpc	r25, r1
     654:	29 f4       	brne	.+10     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
		{
			Disp_Array[3][7] = 0;
     656:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <Disp_Array+0x3f>
     65a:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <Disp_Array+0x3e>
     65e:	08 95       	ret
		}
		
		else if (point == 7)
     660:	87 30       	cpi	r24, 0x07	; 7
     662:	91 05       	cpc	r25, r1
     664:	29 f4       	brne	.+10     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
		{
			Disp_Array[4][7] = 0;
     666:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <Disp_Array+0x4f>
     66a:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <Disp_Array+0x4e>
     66e:	08 95       	ret
		}
		
		else if (point == 8)
     670:	88 30       	cpi	r24, 0x08	; 8
     672:	91 05       	cpc	r25, r1
     674:	29 f4       	brne	.+10     	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
		{
			Disp_Array[5][7] = 0;
     676:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <Disp_Array+0x5f>
     67a:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <Disp_Array+0x5e>
     67e:	08 95       	ret
		}
		
		else if (point == 9)
     680:	89 30       	cpi	r24, 0x09	; 9
     682:	91 05       	cpc	r25, r1
     684:	29 f4       	brne	.+10     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
		{
			Disp_Array[5][6] = 0;
     686:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <Disp_Array+0x5d>
     68a:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <Disp_Array+0x5c>
     68e:	08 95       	ret
		}
		
		else if (point == 10)
     690:	8a 30       	cpi	r24, 0x0A	; 10
     692:	91 05       	cpc	r25, r1
     694:	29 f4       	brne	.+10     	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
		{
			Disp_Array[5][5] = 0;
     696:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <Disp_Array+0x5b>
     69a:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <Disp_Array+0x5a>
     69e:	08 95       	ret
		}
		
		else if (point == 11)
     6a0:	8b 30       	cpi	r24, 0x0B	; 11
     6a2:	91 05       	cpc	r25, r1
     6a4:	29 f4       	brne	.+10     	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
		{
			Disp_Array[6][5] = 0;
     6a6:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <Disp_Array+0x6b>
     6aa:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <Disp_Array+0x6a>
     6ae:	08 95       	ret
		}
		
		else if (point == 12)
     6b0:	8c 30       	cpi	r24, 0x0C	; 12
     6b2:	91 05       	cpc	r25, r1
     6b4:	29 f4       	brne	.+10     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
		{
			Disp_Array[7][5] = 0;
     6b6:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <Disp_Array+0x7b>
     6ba:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <Disp_Array+0x7a>
     6be:	08 95       	ret
		}
		
		else if (point == 13)
     6c0:	8d 30       	cpi	r24, 0x0D	; 13
     6c2:	91 05       	cpc	r25, r1
     6c4:	29 f4       	brne	.+10     	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
		{
			Disp_Array[7][4] = 0;
     6c6:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <Disp_Array+0x79>
     6ca:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <Disp_Array+0x78>
     6ce:	08 95       	ret
		}
		
		else if (point == 14)
     6d0:	8e 30       	cpi	r24, 0x0E	; 14
     6d2:	91 05       	cpc	r25, r1
     6d4:	29 f4       	brne	.+10     	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
		{
			Disp_Array[7][3] = 0;
     6d6:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <Disp_Array+0x77>
     6da:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <Disp_Array+0x76>
     6de:	08 95       	ret
		}
		
		else if (point == 15)
     6e0:	8f 30       	cpi	r24, 0x0F	; 15
     6e2:	91 05       	cpc	r25, r1
     6e4:	29 f4       	brne	.+10     	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
		{
			Disp_Array[7][2] = 0;
     6e6:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <Disp_Array+0x75>
     6ea:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <Disp_Array+0x74>
     6ee:	08 95       	ret
		}
		
		else if (point == 16)
     6f0:	80 31       	cpi	r24, 0x10	; 16
     6f2:	91 05       	cpc	r25, r1
     6f4:	29 f4       	brne	.+10     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
		{
			Disp_Array[6][2] = 0;
     6f6:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <Disp_Array+0x65>
     6fa:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <Disp_Array+0x64>
     6fe:	08 95       	ret
		}
		
		else if (point == 17)
     700:	81 31       	cpi	r24, 0x11	; 17
     702:	91 05       	cpc	r25, r1
     704:	29 f4       	brne	.+10     	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
		{
			Disp_Array[5][2] = 0;
     706:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <Disp_Array+0x55>
     70a:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <Disp_Array+0x54>
     70e:	08 95       	ret
		}
		
		else if (point == 18)
     710:	82 31       	cpi	r24, 0x12	; 18
     712:	91 05       	cpc	r25, r1
     714:	29 f4       	brne	.+10     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
		{
			Disp_Array[5][1] = 0;
     716:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <Disp_Array+0x53>
     71a:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <Disp_Array+0x52>
     71e:	08 95       	ret
		}
		
		else if (point == 19)
     720:	83 31       	cpi	r24, 0x13	; 19
     722:	91 05       	cpc	r25, r1
     724:	29 f4       	brne	.+10     	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
		{
			Disp_Array[5][0] = 0;
     726:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <Disp_Array+0x51>
     72a:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <Disp_Array+0x50>
     72e:	08 95       	ret
		}
		
		else if (point == 20)
     730:	84 31       	cpi	r24, 0x14	; 20
     732:	91 05       	cpc	r25, r1
     734:	29 f4       	brne	.+10     	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
		{
			Disp_Array[4][0] = 0;
     736:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <Disp_Array+0x41>
     73a:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <Disp_Array+0x40>
     73e:	08 95       	ret
		}
		
		else if (point == 21)
     740:	85 31       	cpi	r24, 0x15	; 21
     742:	91 05       	cpc	r25, r1
     744:	29 f4       	brne	.+10     	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
		{
			Disp_Array[3][0] = 0;
     746:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <Disp_Array+0x31>
     74a:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <Disp_Array+0x30>
     74e:	08 95       	ret
		}
		
		else if (point == 22)
     750:	86 31       	cpi	r24, 0x16	; 22
     752:	91 05       	cpc	r25, r1
     754:	29 f4       	brne	.+10     	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
		{
			Disp_Array[2][0] = 0;
     756:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <Disp_Array+0x21>
     75a:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <Disp_Array+0x20>
     75e:	08 95       	ret
		}
		
		else if (point == 23)
     760:	87 31       	cpi	r24, 0x17	; 23
     762:	91 05       	cpc	r25, r1
     764:	29 f4       	brne	.+10     	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
		{
			Disp_Array[2][1] = 0;
     766:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <Disp_Array+0x23>
     76a:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <Disp_Array+0x22>
     76e:	08 95       	ret
		}
		
		else if (point == 24)
     770:	88 31       	cpi	r24, 0x18	; 24
     772:	91 05       	cpc	r25, r1
     774:	29 f4       	brne	.+10     	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
		{
			Disp_Array[2][2] = 0;
     776:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <Disp_Array+0x25>
     77a:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <Disp_Array+0x24>
     77e:	08 95       	ret
		}
		
		else if (point == 25)
     780:	89 31       	cpi	r24, 0x19	; 25
     782:	91 05       	cpc	r25, r1
     784:	29 f4       	brne	.+10     	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
		{
			Disp_Array[1][2] = 0;
     786:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <Disp_Array+0x15>
     78a:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <Disp_Array+0x14>
     78e:	08 95       	ret
		}
		
		else if (point == 26)
     790:	8a 31       	cpi	r24, 0x1A	; 26
     792:	91 05       	cpc	r25, r1
     794:	29 f4       	brne	.+10     	; 0x7a0 <__LOCK_REGION_LENGTH__+0x3a0>
		{
			Disp_Array[0][2] = 0;
     796:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <Disp_Array+0x5>
     79a:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <Disp_Array+0x4>
     79e:	08 95       	ret
		}
		
		else if (point == 27)
     7a0:	8b 31       	cpi	r24, 0x1B	; 27
     7a2:	91 05       	cpc	r25, r1
     7a4:	29 f4       	brne	.+10     	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
		{
			Disp_Array[0][3] = 0;
     7a6:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <Disp_Array+0x7>
     7aa:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <Disp_Array+0x6>
     7ae:	08 95       	ret
		}
		
		else if (point == 28)
     7b0:	8c 31       	cpi	r24, 0x1C	; 28
     7b2:	91 05       	cpc	r25, r1
     7b4:	29 f4       	brne	.+10     	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
		{
			Disp_Array[0][4] = 0;
     7b6:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <Disp_Array+0x9>
     7ba:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <Disp_Array+0x8>
     7be:	08 95       	ret
		}
		
		else if (point == 101)     //position of player 01 in yard
     7c0:	85 36       	cpi	r24, 0x65	; 101
     7c2:	91 05       	cpc	r25, r1
     7c4:	29 f4       	brne	.+10     	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
		{
			Disp_Array[0][6] = 0;
     7c6:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <Disp_Array+0xd>
     7ca:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <Disp_Array+0xc>
     7ce:	08 95       	ret
		}
		
		else if (point == 102)		// position of player 02 in yard (in 4 player mode)
     7d0:	86 36       	cpi	r24, 0x66	; 102
     7d2:	91 05       	cpc	r25, r1
     7d4:	29 f4       	brne	.+10     	; 0x7e0 <__LOCK_REGION_LENGTH__+0x3e0>
		{
			Disp_Array[6][7] = 0;
     7d6:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <Disp_Array+0x6f>
     7da:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <Disp_Array+0x6e>
     7de:	08 95       	ret
		}
		
		else if (point == 103)		//position of player 03 in yard (in 4 player mode) player 02 in 2 player mode
     7e0:	87 36       	cpi	r24, 0x67	; 103
     7e2:	91 05       	cpc	r25, r1
     7e4:	29 f4       	brne	.+10     	; 0x7f0 <__LOCK_REGION_LENGTH__+0x3f0>
		{
			Disp_Array[7][1] = 0;
     7e6:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <Disp_Array+0x73>
     7ea:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <Disp_Array+0x72>
     7ee:	08 95       	ret
		}
		
		else if (point == 104)		// position of player 04 in yard (in 4 player mode)
     7f0:	88 36       	cpi	r24, 0x68	; 104
     7f2:	91 05       	cpc	r25, r1
     7f4:	21 f4       	brne	.+8      	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
		{
			Disp_Array[1][0] = 0;
     7f6:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <Disp_Array+0x11>
     7fa:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <Disp_Array+0x10>
     7fe:	08 95       	ret

00000800 <_Z10check_Safei>:
/*----------------------------------------checking for safe----------------------------------------------*/
bool check_Safe (int position)
{
	bool IsSafe = false;	// to check whether the player is in a safe position or not
	
	if (position == 1 || position == 8 || position == 15 || position == 22)
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	91 05       	cpc	r25, r1
     804:	59 f0       	breq	.+22     	; 0x81c <_Z10check_Safei+0x1c>
     806:	88 30       	cpi	r24, 0x08	; 8
     808:	91 05       	cpc	r25, r1
     80a:	51 f0       	breq	.+20     	; 0x820 <_Z10check_Safei+0x20>
     80c:	8f 30       	cpi	r24, 0x0F	; 15
     80e:	91 05       	cpc	r25, r1
     810:	49 f0       	breq	.+18     	; 0x824 <_Z10check_Safei+0x24>
     812:	21 e0       	ldi	r18, 0x01	; 1
     814:	46 97       	sbiw	r24, 0x16	; 22
     816:	39 f0       	breq	.+14     	; 0x826 <_Z10check_Safei+0x26>
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	05 c0       	rjmp	.+10     	; 0x826 <_Z10check_Safei+0x26>
	{
		IsSafe = true;
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	03 c0       	rjmp	.+6      	; 0x826 <_Z10check_Safei+0x26>
     820:	21 e0       	ldi	r18, 0x01	; 1
     822:	01 c0       	rjmp	.+2      	; 0x826 <_Z10check_Safei+0x26>
     824:	21 e0       	ldi	r18, 0x01	; 1
	{
		IsSafe = false;
	}
	
	return IsSafe;
}
     826:	82 2f       	mov	r24, r18
     828:	08 95       	ret

0000082a <_Z4LUDOv>:


	
void LUDO(){		//Word Ludo
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
	MAX7219_set_column_8X8(px,0b01111110);			//L
     82e:	c7 e1       	ldi	r28, 0x17	; 23
     830:	d2 e0       	ldi	r29, 0x02	; 2
     832:	6e e7       	ldi	r22, 0x7E	; 126
     834:	88 81       	ld	r24, Y
     836:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-1,0b00000010);
     83a:	88 81       	ld	r24, Y
     83c:	62 e0       	ldi	r22, 0x02	; 2
     83e:	81 50       	subi	r24, 0x01	; 1
     840:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-2,0b00000010);
     844:	88 81       	ld	r24, Y
     846:	62 e0       	ldi	r22, 0x02	; 2
     848:	82 50       	subi	r24, 0x02	; 2
     84a:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-3,0b00000010);
     84e:	88 81       	ld	r24, Y
     850:	62 e0       	ldi	r22, 0x02	; 2
     852:	83 50       	subi	r24, 0x03	; 3
     854:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	
	MAX7219_set_column_8X8(px-5,0b01111100);       //U
     858:	88 81       	ld	r24, Y
     85a:	6c e7       	ldi	r22, 0x7C	; 124
     85c:	85 50       	subi	r24, 0x05	; 5
     85e:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-6,0b00000010);
     862:	88 81       	ld	r24, Y
     864:	62 e0       	ldi	r22, 0x02	; 2
     866:	86 50       	subi	r24, 0x06	; 6
     868:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-7,0b00000010);
     86c:	88 81       	ld	r24, Y
     86e:	62 e0       	ldi	r22, 0x02	; 2
     870:	87 50       	subi	r24, 0x07	; 7
     872:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-8,0b00000010);
     876:	88 81       	ld	r24, Y
     878:	62 e0       	ldi	r22, 0x02	; 2
     87a:	88 50       	subi	r24, 0x08	; 8
     87c:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-9,0b01111100);
     880:	88 81       	ld	r24, Y
     882:	6c e7       	ldi	r22, 0x7C	; 124
     884:	89 50       	subi	r24, 0x09	; 9
     886:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	
	MAX7219_set_column_8X8(px-11,0b01111110);      //D
     88a:	88 81       	ld	r24, Y
     88c:	6e e7       	ldi	r22, 0x7E	; 126
     88e:	8b 50       	subi	r24, 0x0B	; 11
     890:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-12,0b01000010);
     894:	88 81       	ld	r24, Y
     896:	62 e4       	ldi	r22, 0x42	; 66
     898:	8c 50       	subi	r24, 0x0C	; 12
     89a:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-13,0b01000010);
     89e:	88 81       	ld	r24, Y
     8a0:	62 e4       	ldi	r22, 0x42	; 66
     8a2:	8d 50       	subi	r24, 0x0D	; 13
     8a4:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-14,0b00111100);
     8a8:	88 81       	ld	r24, Y
     8aa:	6c e3       	ldi	r22, 0x3C	; 60
     8ac:	8e 50       	subi	r24, 0x0E	; 14
     8ae:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	
	MAX7219_set_column_8X8(px-16,0b00111100);       //O
     8b2:	88 81       	ld	r24, Y
     8b4:	6c e3       	ldi	r22, 0x3C	; 60
     8b6:	80 51       	subi	r24, 0x10	; 16
     8b8:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-17,0b01000010);
     8bc:	88 81       	ld	r24, Y
     8be:	62 e4       	ldi	r22, 0x42	; 66
     8c0:	81 51       	subi	r24, 0x11	; 17
     8c2:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-18,0b01000010);
     8c6:	88 81       	ld	r24, Y
     8c8:	62 e4       	ldi	r22, 0x42	; 66
     8ca:	82 51       	subi	r24, 0x12	; 18
     8cc:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-19,0b01000010);
     8d0:	88 81       	ld	r24, Y
     8d2:	62 e4       	ldi	r22, 0x42	; 66
     8d4:	83 51       	subi	r24, 0x13	; 19
     8d6:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-20,0b00111100);
     8da:	88 81       	ld	r24, Y
     8dc:	6c e3       	ldi	r22, 0x3C	; 60
     8de:	84 51       	subi	r24, 0x14	; 20
     8e0:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
}
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <_Z6WINNERv>:


void WINNER(){		//Word Ludo
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
	MAX7219_set_column_8X8(px,0b01111110);			//W
     8ee:	c7 e1       	ldi	r28, 0x17	; 23
     8f0:	d2 e0       	ldi	r29, 0x02	; 2
     8f2:	6e e7       	ldi	r22, 0x7E	; 126
     8f4:	88 81       	ld	r24, Y
     8f6:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-1,0b00000100);
     8fa:	88 81       	ld	r24, Y
     8fc:	64 e0       	ldi	r22, 0x04	; 4
     8fe:	81 50       	subi	r24, 0x01	; 1
     900:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-2,0b00111000);
     904:	88 81       	ld	r24, Y
     906:	68 e3       	ldi	r22, 0x38	; 56
     908:	82 50       	subi	r24, 0x02	; 2
     90a:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-3,0b00000100);
     90e:	88 81       	ld	r24, Y
     910:	64 e0       	ldi	r22, 0x04	; 4
     912:	83 50       	subi	r24, 0x03	; 3
     914:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-4,0b01111110);	
     918:	88 81       	ld	r24, Y
     91a:	6e e7       	ldi	r22, 0x7E	; 126
     91c:	84 50       	subi	r24, 0x04	; 4
     91e:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	
	MAX7219_set_column_8X8(px-6,0b01000010);		//I
     922:	88 81       	ld	r24, Y
     924:	62 e4       	ldi	r22, 0x42	; 66
     926:	86 50       	subi	r24, 0x06	; 6
     928:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-7,0b01111110);	
     92c:	88 81       	ld	r24, Y
     92e:	6e e7       	ldi	r22, 0x7E	; 126
     930:	87 50       	subi	r24, 0x07	; 7
     932:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-8,0b01000010);
     936:	88 81       	ld	r24, Y
     938:	62 e4       	ldi	r22, 0x42	; 66
     93a:	88 50       	subi	r24, 0x08	; 8
     93c:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	
	MAX7219_set_column_8X8(px-10,0b01111110);		//N
     940:	88 81       	ld	r24, Y
     942:	6e e7       	ldi	r22, 0x7E	; 126
     944:	8a 50       	subi	r24, 0x0A	; 10
     946:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-11,0b00100000);
     94a:	88 81       	ld	r24, Y
     94c:	60 e2       	ldi	r22, 0x20	; 32
     94e:	8b 50       	subi	r24, 0x0B	; 11
     950:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-12,0b00010000);
     954:	88 81       	ld	r24, Y
     956:	60 e1       	ldi	r22, 0x10	; 16
     958:	8c 50       	subi	r24, 0x0C	; 12
     95a:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-13,0b00001000);
     95e:	88 81       	ld	r24, Y
     960:	68 e0       	ldi	r22, 0x08	; 8
     962:	8d 50       	subi	r24, 0x0D	; 13
     964:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-14,0b00000100);
     968:	88 81       	ld	r24, Y
     96a:	64 e0       	ldi	r22, 0x04	; 4
     96c:	8e 50       	subi	r24, 0x0E	; 14
     96e:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-15,0b01111110);		
     972:	88 81       	ld	r24, Y
     974:	6e e7       	ldi	r22, 0x7E	; 126
     976:	8f 50       	subi	r24, 0x0F	; 15
     978:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	
	MAX7219_set_column_8X8(px-17,0b01111110);		//N
     97c:	88 81       	ld	r24, Y
     97e:	6e e7       	ldi	r22, 0x7E	; 126
     980:	81 51       	subi	r24, 0x11	; 17
     982:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-18,0b00100000);
     986:	88 81       	ld	r24, Y
     988:	60 e2       	ldi	r22, 0x20	; 32
     98a:	82 51       	subi	r24, 0x12	; 18
     98c:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-19,0b00010000);
     990:	88 81       	ld	r24, Y
     992:	60 e1       	ldi	r22, 0x10	; 16
     994:	83 51       	subi	r24, 0x13	; 19
     996:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-20,0b00001000);
     99a:	88 81       	ld	r24, Y
     99c:	68 e0       	ldi	r22, 0x08	; 8
     99e:	84 51       	subi	r24, 0x14	; 20
     9a0:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-21,0b00000100);
     9a4:	88 81       	ld	r24, Y
     9a6:	64 e0       	ldi	r22, 0x04	; 4
     9a8:	85 51       	subi	r24, 0x15	; 21
     9aa:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-22,0b01111110);
     9ae:	88 81       	ld	r24, Y
     9b0:	6e e7       	ldi	r22, 0x7E	; 126
     9b2:	86 51       	subi	r24, 0x16	; 22
     9b4:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	
	MAX7219_set_column_8X8(px-24,0b01111110);		//E
     9b8:	88 81       	ld	r24, Y
     9ba:	6e e7       	ldi	r22, 0x7E	; 126
     9bc:	88 51       	subi	r24, 0x18	; 24
     9be:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-25,0b01010010);
     9c2:	88 81       	ld	r24, Y
     9c4:	62 e5       	ldi	r22, 0x52	; 82
     9c6:	89 51       	subi	r24, 0x19	; 25
     9c8:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-26,0b01010010);
     9cc:	88 81       	ld	r24, Y
     9ce:	62 e5       	ldi	r22, 0x52	; 82
     9d0:	8a 51       	subi	r24, 0x1A	; 26
     9d2:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-27,0b01000010);
     9d6:	88 81       	ld	r24, Y
     9d8:	62 e4       	ldi	r22, 0x42	; 66
     9da:	8b 51       	subi	r24, 0x1B	; 27
     9dc:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	
	MAX7219_set_column_8X8(px-29,0b01111110);		//R
     9e0:	88 81       	ld	r24, Y
     9e2:	6e e7       	ldi	r22, 0x7E	; 126
     9e4:	8d 51       	subi	r24, 0x1D	; 29
     9e6:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-30,0b01011000);
     9ea:	88 81       	ld	r24, Y
     9ec:	68 e5       	ldi	r22, 0x58	; 88
     9ee:	8e 51       	subi	r24, 0x1E	; 30
     9f0:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-31,0b01010100);
     9f4:	88 81       	ld	r24, Y
     9f6:	64 e5       	ldi	r22, 0x54	; 84
     9f8:	8f 51       	subi	r24, 0x1F	; 31
     9fa:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(px-32,0b01110010);
     9fe:	88 81       	ld	r24, Y
     a00:	62 e7       	ldi	r22, 0x72	; 114
     a02:	80 52       	subi	r24, 0x20	; 32
     a04:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
}
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <_Z7Disp_01v>:


//Fucntion to display number 01 on matrix display
void Disp_01 ()
{
	MAX7219_clear_8X8();
     a0e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
	MAX7219_set_column_8X8(5, 0b00100010);
     a12:	62 e2       	ldi	r22, 0x22	; 34
     a14:	85 e0       	ldi	r24, 0x05	; 5
     a16:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(4, 0b01111110);
     a1a:	6e e7       	ldi	r22, 0x7E	; 126
     a1c:	84 e0       	ldi	r24, 0x04	; 4
     a1e:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(3, 0b00000010);
     a22:	62 e0       	ldi	r22, 0x02	; 2
     a24:	83 e0       	ldi	r24, 0x03	; 3
     a26:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
     a2a:	08 95       	ret

00000a2c <_Z7Disp_02v>:
}

//Function to display number 02 on matrix display
void Disp_02()
{
	MAX7219_clear_8X8();
     a2c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
	MAX7219_set_column_8X8(5, 0b00100010);
     a30:	62 e2       	ldi	r22, 0x22	; 34
     a32:	85 e0       	ldi	r24, 0x05	; 5
     a34:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(4, 0b01000110);
     a38:	66 e4       	ldi	r22, 0x46	; 70
     a3a:	84 e0       	ldi	r24, 0x04	; 4
     a3c:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(3, 0b01001010);
     a40:	6a e4       	ldi	r22, 0x4A	; 74
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(2, 0b00110010);
     a48:	62 e3       	ldi	r22, 0x32	; 50
     a4a:	82 e0       	ldi	r24, 0x02	; 2
     a4c:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
     a50:	08 95       	ret

00000a52 <_Z7Disp_03v>:
}

//Function to display number 03 on matrix display
void Disp_03()
{
	MAX7219_clear_8X8();
     a52:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
	MAX7219_set_column_8X8(5, 0b00100100);
     a56:	64 e2       	ldi	r22, 0x24	; 36
     a58:	85 e0       	ldi	r24, 0x05	; 5
     a5a:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(4, 0b01000010);
     a5e:	62 e4       	ldi	r22, 0x42	; 66
     a60:	84 e0       	ldi	r24, 0x04	; 4
     a62:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(3, 0b01011010);
     a66:	6a e5       	ldi	r22, 0x5A	; 90
     a68:	83 e0       	ldi	r24, 0x03	; 3
     a6a:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(2, 0b00100100);
     a6e:	64 e2       	ldi	r22, 0x24	; 36
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
     a76:	08 95       	ret

00000a78 <_Z7Disp_04v>:
}

// Function to display 04 on matrix display
void Disp_04()
{
	MAX7219_clear_8X8();
     a78:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
	MAX7219_set_column_8X8(2,0b00001000);
     a7c:	68 e0       	ldi	r22, 0x08	; 8
     a7e:	82 e0       	ldi	r24, 0x02	; 2
     a80:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(3,0b01111110);
     a84:	6e e7       	ldi	r22, 0x7E	; 126
     a86:	83 e0       	ldi	r24, 0x03	; 3
     a88:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(4,0b00101000);
     a8c:	68 e2       	ldi	r22, 0x28	; 40
     a8e:	84 e0       	ldi	r24, 0x04	; 4
     a90:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(5,0b00011000);
     a94:	68 e1       	ldi	r22, 0x18	; 24
     a96:	85 e0       	ldi	r24, 0x05	; 5
     a98:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
	MAX7219_set_column_8X8(6,0b00001000);
     a9c:	68 e0       	ldi	r22, 0x08	; 8
     a9e:	86 e0       	ldi	r24, 0x06	; 6
     aa0:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z22MAX7219_set_column_8X8hh>
     aa4:	08 95       	ret

00000aa6 <_Z9Disp_namev>:
}


void Disp_name(){				//Display the name LUDO
	for (px=0;px<30;px++)
     aa6:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <px+0x1>
     aaa:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <px>
	{
		LUDO();
     aae:	0e 94 15 04 	call	0x82a	; 0x82a <_Z4LUDOv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ab2:	2f e7       	ldi	r18, 0x7F	; 127
     ab4:	89 ea       	ldi	r24, 0xA9	; 169
     ab6:	93 e0       	ldi	r25, 0x03	; 3
     ab8:	21 50       	subi	r18, 0x01	; 1
     aba:	80 40       	sbci	r24, 0x00	; 0
     abc:	90 40       	sbci	r25, 0x00	; 0
     abe:	e1 f7       	brne	.-8      	; 0xab8 <_Z9Disp_namev+0x12>
     ac0:	00 c0       	rjmp	.+0      	; 0xac2 <_Z9Disp_namev+0x1c>
     ac2:	00 00       	nop
		_delay_ms(150);
		MAX7219_clear_8X8();
     ac4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
     ac8:	8f e1       	ldi	r24, 0x1F	; 31
     aca:	9e e4       	ldi	r25, 0x4E	; 78
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	f1 f7       	brne	.-4      	; 0xacc <_Z9Disp_namev+0x26>
     ad0:	00 c0       	rjmp	.+0      	; 0xad2 <_Z9Disp_namev+0x2c>
     ad2:	00 00       	nop
	MAX7219_set_column_8X8(6,0b00001000);
}


void Disp_name(){				//Display the name LUDO
	for (px=0;px<30;px++)
     ad4:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <px>
     ad8:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <px+0x1>
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <px+0x1>
     ae2:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <px>
     ae6:	4e 97       	sbiw	r24, 0x1e	; 30
     ae8:	14 f3       	brlt	.-60     	; 0xaae <_Z9Disp_namev+0x8>
		LUDO();
		_delay_ms(150);
		MAX7219_clear_8X8();
		_delay_ms(10);
	}
	MAX7219_clear_8X8();
     aea:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
	px=0;
     aee:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <px+0x1>
     af2:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <px>
     af6:	08 95       	ret

00000af8 <_Z11Disp_winnerv>:
}


void Disp_winner()
{
	for (px=0;px<40;px++)
     af8:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <px+0x1>
     afc:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <px>
	{
		WINNER();
     b00:	0e 94 75 04 	call	0x8ea	; 0x8ea <_Z6WINNERv>
     b04:	2f e7       	ldi	r18, 0x7F	; 127
     b06:	89 ea       	ldi	r24, 0xA9	; 169
     b08:	93 e0       	ldi	r25, 0x03	; 3
     b0a:	21 50       	subi	r18, 0x01	; 1
     b0c:	80 40       	sbci	r24, 0x00	; 0
     b0e:	90 40       	sbci	r25, 0x00	; 0
     b10:	e1 f7       	brne	.-8      	; 0xb0a <_Z11Disp_winnerv+0x12>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <_Z11Disp_winnerv+0x1c>
     b14:	00 00       	nop
		_delay_ms(150);
		MAX7219_clear_8X8();
     b16:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
     b1a:	8f e1       	ldi	r24, 0x1F	; 31
     b1c:	9e e4       	ldi	r25, 0x4E	; 78
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <_Z11Disp_winnerv+0x26>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <_Z11Disp_winnerv+0x2c>
     b24:	00 00       	nop
}


void Disp_winner()
{
	for (px=0;px<40;px++)
     b26:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <px>
     b2a:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <px+0x1>
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <px+0x1>
     b34:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <px>
     b38:	88 97       	sbiw	r24, 0x28	; 40
     b3a:	14 f3       	brlt	.-60     	; 0xb00 <_Z11Disp_winnerv+0x8>
		WINNER();
		_delay_ms(150);
		MAX7219_clear_8X8();
		_delay_ms(10);
	}
	MAX7219_clear_8X8();
     b3c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
	px=0;
     b40:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <px+0x1>
     b44:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <px>
     b48:	08 95       	ret

00000b4a <_Z9Animationv>:
}


//Function for simple animation
void Animation ()
{
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
	MAX7219_clear_8X8();
     b4e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
     b52:	d0 e0       	ldi	r29, 0x00	; 0
     b54:	c0 e0       	ldi	r28, 0x00	; 0
	for(int i=0; i<8; i++)
	{
		for (int j=0; j<8; j++)
		{
			MAX7219_set_pixel_8X8(i,j,true);
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	6c 2f       	mov	r22, r28
     b5a:	8d 2f       	mov	r24, r29
     b5c:	0e 94 a1 00 	call	0x142	; 0x142 <_Z21MAX7219_set_pixel_8X8hhb>
     b60:	2f e7       	ldi	r18, 0x7F	; 127
     b62:	88 e3       	ldi	r24, 0x38	; 56
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	21 50       	subi	r18, 0x01	; 1
     b68:	80 40       	sbci	r24, 0x00	; 0
     b6a:	90 40       	sbci	r25, 0x00	; 0
     b6c:	e1 f7       	brne	.-8      	; 0xb66 <_Z9Animationv+0x1c>
     b6e:	00 c0       	rjmp	.+0      	; 0xb70 <_Z9Animationv+0x26>
     b70:	00 00       	nop
     b72:	cf 5f       	subi	r28, 0xFF	; 255
void Animation ()
{
	MAX7219_clear_8X8();
	for(int i=0; i<8; i++)
	{
		for (int j=0; j<8; j++)
     b74:	c8 30       	cpi	r28, 0x08	; 8
     b76:	79 f7       	brne	.-34     	; 0xb56 <_Z9Animationv+0xc>
     b78:	df 5f       	subi	r29, 0xFF	; 255

//Function for simple animation
void Animation ()
{
	MAX7219_clear_8X8();
	for(int i=0; i<8; i++)
     b7a:	d8 30       	cpi	r29, 0x08	; 8
     b7c:	59 f7       	brne	.-42     	; 0xb54 <_Z9Animationv+0xa>
     b7e:	2f ef       	ldi	r18, 0xFF	; 255
     b80:	84 e3       	ldi	r24, 0x34	; 52
     b82:	9c e0       	ldi	r25, 0x0C	; 12
     b84:	21 50       	subi	r18, 0x01	; 1
     b86:	80 40       	sbci	r24, 0x00	; 0
     b88:	90 40       	sbci	r25, 0x00	; 0
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <_Z9Animationv+0x3a>
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <_Z9Animationv+0x44>
     b8e:	00 00       	nop
			MAX7219_set_pixel_8X8(i,j,true);
			_delay_ms(50);
		}
	}
	_delay_ms(500);
	MAX7219_clear_8X8();
     b90:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
}
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	08 95       	ret

00000b9a <_Z8disp_segc>:
/*---------------------------------------Configuring seven segment display----------------------------------------------*/

void disp_seg(char L){	
	if (L == '1')
     b9a:	81 33       	cpi	r24, 0x31	; 49
     b9c:	29 f4       	brne	.+10     	; 0xba8 <_Z8disp_segc+0xe>
	{
		MAX7219_set_row_7SEG(1, 0b00110000);
     b9e:	60 e3       	ldi	r22, 0x30	; 48
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	0e 94 20 01 	call	0x240	; 0x240 <_Z20MAX7219_set_row_7SEGhh>
     ba6:	08 95       	ret
	}
	else if (L == '2')
     ba8:	82 33       	cpi	r24, 0x32	; 50
     baa:	29 f4       	brne	.+10     	; 0xbb6 <_Z8disp_segc+0x1c>
	{
		MAX7219_set_row_7SEG(1, 0b01101101);
     bac:	6d e6       	ldi	r22, 0x6D	; 109
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	0e 94 20 01 	call	0x240	; 0x240 <_Z20MAX7219_set_row_7SEGhh>
     bb4:	08 95       	ret
	}
	else if (L == '3')
     bb6:	83 33       	cpi	r24, 0x33	; 51
     bb8:	29 f4       	brne	.+10     	; 0xbc4 <_Z8disp_segc+0x2a>
	{
		MAX7219_set_row_7SEG(1, 0b01111001);
     bba:	69 e7       	ldi	r22, 0x79	; 121
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	0e 94 20 01 	call	0x240	; 0x240 <_Z20MAX7219_set_row_7SEGhh>
     bc2:	08 95       	ret
	}
	else if (L == '4')
     bc4:	84 33       	cpi	r24, 0x34	; 52
     bc6:	29 f4       	brne	.+10     	; 0xbd2 <_Z8disp_segc+0x38>
	{
		MAX7219_set_row_7SEG(1, 0b00110011);
     bc8:	63 e3       	ldi	r22, 0x33	; 51
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	0e 94 20 01 	call	0x240	; 0x240 <_Z20MAX7219_set_row_7SEGhh>
     bd0:	08 95       	ret
	}
	else if (L == '5')
     bd2:	85 33       	cpi	r24, 0x35	; 53
     bd4:	29 f4       	brne	.+10     	; 0xbe0 <_Z8disp_segc+0x46>
	{
		MAX7219_set_row_7SEG(1, 0b01011011);
     bd6:	6b e5       	ldi	r22, 0x5B	; 91
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	0e 94 20 01 	call	0x240	; 0x240 <_Z20MAX7219_set_row_7SEGhh>
     bde:	08 95       	ret
	}
	else if (L == '6')
     be0:	86 33       	cpi	r24, 0x36	; 54
     be2:	21 f4       	brne	.+8      	; 0xbec <_Z8disp_segc+0x52>
	{
		MAX7219_set_row_7SEG(1, 0b01011111);
     be4:	6f e5       	ldi	r22, 0x5F	; 95
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	0e 94 20 01 	call	0x240	; 0x240 <_Z20MAX7219_set_row_7SEGhh>
     bec:	08 95       	ret

00000bee <_Z13set_curnt_posv>:


/*---------------------Set Current position of players-----------------------------*/
void set_curnt_pos()
{
	set_Path(curnt_Pos_playerA,true);
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <curnt_Pos_playerA>
     bf4:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <curnt_Pos_playerA+0x1>
     bf8:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
	set_Path(curnt_Pos_playerB,true);
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <curnt_Pos_playerB>
     c02:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <curnt_Pos_playerB+0x1>
     c06:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
	set_Path(curnt_Pos_playerC,true);
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <curnt_Pos_playerC>
     c10:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <curnt_Pos_playerC+0x1>
     c14:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
	set_Path(curnt_Pos_playerD,true);
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <curnt_Pos_playerD>
     c1e:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <curnt_Pos_playerD+0x1>
     c22:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
     c26:	08 95       	ret

00000c28 <_Z5checkiiiic>:


/*----------------------------------------Check for displace opponent---------------------------------------------------*/

void check(int player_pos, int oponant_pos, int oponant_distance, int oponant_init, char player)
{
     c28:	bf 92       	push	r11
     c2a:	cf 92       	push	r12
     c2c:	df 92       	push	r13
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	ea 01       	movw	r28, r20
     c3c:	79 01       	movw	r14, r18
	if (player_pos == oponant_pos)
     c3e:	86 17       	cp	r24, r22
     c40:	97 07       	cpc	r25, r23
     c42:	09 f0       	breq	.+2      	; 0xc46 <_Z5checkiiiic+0x1e>
     c44:	e8 c0       	rjmp	.+464    	; 0xe16 <_Z5checkiiiic+0x1ee>
	{
		int oponant_previous = oponant_pos;
		
		for(oponant_distance; oponant_distance<28; oponant_distance++)
     c46:	4c 31       	cpi	r20, 0x1C	; 28
     c48:	51 05       	cpc	r21, r1
     c4a:	0c f0       	brlt	.+2      	; 0xc4e <_Z5checkiiiic+0x26>
     c4c:	81 c0       	rjmp	.+258    	; 0xd50 <_Z5checkiiiic+0x128>
		{
			if (oponant_previous == 1)
			{
				oponant_pos = 28;
     c4e:	0f 2e       	mov	r0, r31
     c50:	fc e1       	ldi	r31, 0x1C	; 28
     c52:	bf 2e       	mov	r11, r31
     c54:	f0 2d       	mov	r31, r0
     c56:	10 e0       	ldi	r17, 0x00	; 0
	{
		int oponant_previous = oponant_pos;
		
		for(oponant_distance; oponant_distance<28; oponant_distance++)
		{
			if (oponant_previous == 1)
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	91 05       	cpc	r25, r1
     c5c:	d1 f5       	brne	.+116    	; 0xcd2 <_Z5checkiiiic+0xaa>
			{
				oponant_pos = 28;
				set_Path(oponant_previous, false);
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
				
				//Update current position of opponant player
				if (oponant_init == 101)
     c68:	25 e6       	ldi	r18, 0x65	; 101
     c6a:	e2 16       	cp	r14, r18
     c6c:	f1 04       	cpc	r15, r1
     c6e:	29 f4       	brne	.+10     	; 0xc7a <_Z5checkiiiic+0x52>
				{
					curnt_Pos_playerA = oponant_pos;
     c70:	b0 92 11 02 	sts	0x0211, r11	; 0x800211 <curnt_Pos_playerA>
     c74:	10 93 12 02 	sts	0x0212, r17	; 0x800212 <curnt_Pos_playerA+0x1>
     c78:	1a c0       	rjmp	.+52     	; 0xcae <_Z5checkiiiic+0x86>
				}
				else if (oponant_init == 102)
     c7a:	86 e6       	ldi	r24, 0x66	; 102
     c7c:	e8 16       	cp	r14, r24
     c7e:	f1 04       	cpc	r15, r1
     c80:	29 f4       	brne	.+10     	; 0xc8c <_Z5checkiiiic+0x64>
				{
					curnt_Pos_playerB = oponant_pos;
     c82:	b0 92 0f 02 	sts	0x020F, r11	; 0x80020f <curnt_Pos_playerB>
     c86:	10 93 10 02 	sts	0x0210, r17	; 0x800210 <curnt_Pos_playerB+0x1>
     c8a:	11 c0       	rjmp	.+34     	; 0xcae <_Z5checkiiiic+0x86>
				}
				else if (oponant_init == 103)
     c8c:	97 e6       	ldi	r25, 0x67	; 103
     c8e:	e9 16       	cp	r14, r25
     c90:	f1 04       	cpc	r15, r1
     c92:	29 f4       	brne	.+10     	; 0xc9e <_Z5checkiiiic+0x76>
				{
					curnt_Pos_playerC = oponant_pos;
     c94:	b0 92 0d 02 	sts	0x020D, r11	; 0x80020d <curnt_Pos_playerC>
     c98:	10 93 0e 02 	sts	0x020E, r17	; 0x80020e <curnt_Pos_playerC+0x1>
     c9c:	08 c0       	rjmp	.+16     	; 0xcae <_Z5checkiiiic+0x86>
				}
				else if (oponant_init == 104)
     c9e:	28 e6       	ldi	r18, 0x68	; 104
     ca0:	e2 16       	cp	r14, r18
     ca2:	f1 04       	cpc	r15, r1
     ca4:	21 f4       	brne	.+8      	; 0xcae <_Z5checkiiiic+0x86>
				{
					curnt_Pos_playerD = oponant_pos;
     ca6:	b0 92 0b 02 	sts	0x020B, r11	; 0x80020b <curnt_Pos_playerD>
     caa:	10 93 0c 02 	sts	0x020C, r17	; 0x80020c <curnt_Pos_playerD+0x1>
				}
				
				
				set_curnt_pos();			//Set current pos of all players
     cae:	0e 94 f7 05 	call	0xbee	; 0xbee <_Z13set_curnt_posv>
				MAX7219_clear_8X8();
     cb2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
				update_Disp();							//Move point and update display
     cb6:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	91 ee       	ldi	r25, 0xE1	; 225
     cbe:	24 e0       	ldi	r18, 0x04	; 4
     cc0:	81 50       	subi	r24, 0x01	; 1
     cc2:	90 40       	sbci	r25, 0x00	; 0
     cc4:	20 40       	sbci	r18, 0x00	; 0
     cc6:	e1 f7       	brne	.-8      	; 0xcc0 <_Z5checkiiiic+0x98>
     cc8:	00 c0       	rjmp	.+0      	; 0xcca <_Z5checkiiiic+0xa2>
     cca:	00 00       	nop
		
		for(oponant_distance; oponant_distance<28; oponant_distance++)
		{
			if (oponant_previous == 1)
			{
				oponant_pos = 28;
     ccc:	8b 2d       	mov	r24, r11
     cce:	91 2f       	mov	r25, r17
     cd0:	3a c0       	rjmp	.+116    	; 0xd46 <_Z5checkiiiic+0x11e>
				_delay_ms(200);
				oponant_previous = oponant_pos;
			}
			else
			{
				oponant_pos--;
     cd2:	6c 01       	movw	r12, r24
     cd4:	21 e0       	ldi	r18, 0x01	; 1
     cd6:	c2 1a       	sub	r12, r18
     cd8:	d1 08       	sbc	r13, r1
				set_Path(oponant_previous, false);
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
				
				
				//Update current position and remaining distance of opponant player
				if (oponant_init == 101)
     ce0:	85 e6       	ldi	r24, 0x65	; 101
     ce2:	e8 16       	cp	r14, r24
     ce4:	f1 04       	cpc	r15, r1
     ce6:	29 f4       	brne	.+10     	; 0xcf2 <_Z5checkiiiic+0xca>
				{
					curnt_Pos_playerA = oponant_pos;
     ce8:	d0 92 12 02 	sts	0x0212, r13	; 0x800212 <curnt_Pos_playerA+0x1>
     cec:	c0 92 11 02 	sts	0x0211, r12	; 0x800211 <curnt_Pos_playerA>
     cf0:	1a c0       	rjmp	.+52     	; 0xd26 <_Z5checkiiiic+0xfe>
				}
				else if (oponant_init == 102)
     cf2:	96 e6       	ldi	r25, 0x66	; 102
     cf4:	e9 16       	cp	r14, r25
     cf6:	f1 04       	cpc	r15, r1
     cf8:	29 f4       	brne	.+10     	; 0xd04 <_Z5checkiiiic+0xdc>
				{
					curnt_Pos_playerB = oponant_pos;
     cfa:	d0 92 10 02 	sts	0x0210, r13	; 0x800210 <curnt_Pos_playerB+0x1>
     cfe:	c0 92 0f 02 	sts	0x020F, r12	; 0x80020f <curnt_Pos_playerB>
     d02:	11 c0       	rjmp	.+34     	; 0xd26 <_Z5checkiiiic+0xfe>
				}
				else if (oponant_init == 103)
     d04:	27 e6       	ldi	r18, 0x67	; 103
     d06:	e2 16       	cp	r14, r18
     d08:	f1 04       	cpc	r15, r1
     d0a:	29 f4       	brne	.+10     	; 0xd16 <_Z5checkiiiic+0xee>
				{
					curnt_Pos_playerC = oponant_pos;
     d0c:	d0 92 0e 02 	sts	0x020E, r13	; 0x80020e <curnt_Pos_playerC+0x1>
     d10:	c0 92 0d 02 	sts	0x020D, r12	; 0x80020d <curnt_Pos_playerC>
     d14:	08 c0       	rjmp	.+16     	; 0xd26 <_Z5checkiiiic+0xfe>
				}
				else if (oponant_init == 104)
     d16:	88 e6       	ldi	r24, 0x68	; 104
     d18:	e8 16       	cp	r14, r24
     d1a:	f1 04       	cpc	r15, r1
     d1c:	21 f4       	brne	.+8      	; 0xd26 <_Z5checkiiiic+0xfe>
				{
					curnt_Pos_playerD = oponant_pos;
     d1e:	d0 92 0c 02 	sts	0x020C, r13	; 0x80020c <curnt_Pos_playerD+0x1>
     d22:	c0 92 0b 02 	sts	0x020B, r12	; 0x80020b <curnt_Pos_playerD>
				}
				
				
				set_curnt_pos();			//Set current position of all players
     d26:	0e 94 f7 05 	call	0xbee	; 0xbee <_Z13set_curnt_posv>
				
				MAX7219_clear_8X8();
     d2a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
				update_Disp();							//Move point and update display
     d2e:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
     d32:	9f ef       	ldi	r25, 0xFF	; 255
     d34:	21 ee       	ldi	r18, 0xE1	; 225
     d36:	84 e0       	ldi	r24, 0x04	; 4
     d38:	91 50       	subi	r25, 0x01	; 1
     d3a:	20 40       	sbci	r18, 0x00	; 0
     d3c:	80 40       	sbci	r24, 0x00	; 0
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <_Z5checkiiiic+0x110>
     d40:	00 c0       	rjmp	.+0      	; 0xd42 <_Z5checkiiiic+0x11a>
     d42:	00 00       	nop
				_delay_ms(200);
				oponant_previous = oponant_pos;
			}
			else
			{
				oponant_pos--;
     d44:	c6 01       	movw	r24, r12
{
	if (player_pos == oponant_pos)
	{
		int oponant_previous = oponant_pos;
		
		for(oponant_distance; oponant_distance<28; oponant_distance++)
     d46:	21 96       	adiw	r28, 0x01	; 1
     d48:	cc 31       	cpi	r28, 0x1C	; 28
     d4a:	d1 05       	cpc	r29, r1
     d4c:	09 f0       	breq	.+2      	; 0xd50 <_Z5checkiiiic+0x128>
     d4e:	84 cf       	rjmp	.-248    	; 0xc58 <_Z5checkiiiic+0x30>
				_delay_ms(200);
				oponant_previous = oponant_pos;
			}
		}
		
		set_Path(oponant_pos,false);
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
		
		//Update current position and remaining distance of opponent player
		if (oponant_init == 101)
     d56:	95 e6       	ldi	r25, 0x65	; 101
     d58:	e9 16       	cp	r14, r25
     d5a:	f1 04       	cpc	r15, r1
     d5c:	69 f4       	brne	.+26     	; 0xd78 <_Z5checkiiiic+0x150>
		{
			curnt_Pos_playerA = oponant_init;
     d5e:	85 e6       	ldi	r24, 0x65	; 101
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <curnt_Pos_playerA+0x1>
     d66:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <curnt_Pos_playerA>
			remaining_distance_p1 = 28;
     d6a:	8c e1       	ldi	r24, 0x1C	; 28
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <remaining_distance_p1+0x1>
     d72:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <remaining_distance_p1>
     d76:	32 c0       	rjmp	.+100    	; 0xddc <_Z5checkiiiic+0x1b4>
		}
		else if (oponant_init == 102)
     d78:	26 e6       	ldi	r18, 0x66	; 102
     d7a:	e2 16       	cp	r14, r18
     d7c:	f1 04       	cpc	r15, r1
     d7e:	69 f4       	brne	.+26     	; 0xd9a <_Z5checkiiiic+0x172>
		{
			curnt_Pos_playerB = oponant_init;
     d80:	86 e6       	ldi	r24, 0x66	; 102
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <curnt_Pos_playerB+0x1>
     d88:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <curnt_Pos_playerB>
			remaining_distance_p2 = 28;
     d8c:	8c e1       	ldi	r24, 0x1C	; 28
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <remaining_distance_p2+0x1>
     d94:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <remaining_distance_p2>
     d98:	21 c0       	rjmp	.+66     	; 0xddc <_Z5checkiiiic+0x1b4>
		}
		else if (oponant_init == 103)
     d9a:	87 e6       	ldi	r24, 0x67	; 103
     d9c:	e8 16       	cp	r14, r24
     d9e:	f1 04       	cpc	r15, r1
     da0:	69 f4       	brne	.+26     	; 0xdbc <_Z5checkiiiic+0x194>
		{
			curnt_Pos_playerC = oponant_init;
     da2:	87 e6       	ldi	r24, 0x67	; 103
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <curnt_Pos_playerC+0x1>
     daa:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <curnt_Pos_playerC>
			remaining_distance_p3 = 28;
     dae:	8c e1       	ldi	r24, 0x1C	; 28
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <remaining_distance_p3+0x1>
     db6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <remaining_distance_p3>
     dba:	10 c0       	rjmp	.+32     	; 0xddc <_Z5checkiiiic+0x1b4>
		}
		else if (oponant_init == 104)
     dbc:	98 e6       	ldi	r25, 0x68	; 104
     dbe:	e9 16       	cp	r14, r25
     dc0:	f1 04       	cpc	r15, r1
     dc2:	61 f4       	brne	.+24     	; 0xddc <_Z5checkiiiic+0x1b4>
		{
			curnt_Pos_playerD = oponant_init;
     dc4:	88 e6       	ldi	r24, 0x68	; 104
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <curnt_Pos_playerD+0x1>
     dcc:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <curnt_Pos_playerD>
			remaining_distance_p4 = 28;
     dd0:	8c e1       	ldi	r24, 0x1C	; 28
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <remaining_distance_p4+0x1>
     dd8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <remaining_distance_p4>
		}
		
		
		/*Update the next chance*/
		if (player == 'A')
     ddc:	01 34       	cpi	r16, 0x41	; 65
     dde:	21 f4       	brne	.+8      	; 0xde8 <_Z5checkiiiic+0x1c0>
		{
			chance = 'A';
     de0:	81 e4       	ldi	r24, 0x41	; 65
     de2:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <chance>
     de6:	11 c0       	rjmp	.+34     	; 0xe0a <_Z5checkiiiic+0x1e2>
		}
		else if (player == 'B')
     de8:	02 34       	cpi	r16, 0x42	; 66
     dea:	21 f4       	brne	.+8      	; 0xdf4 <_Z5checkiiiic+0x1cc>
		{
			chance = 'B';
     dec:	82 e4       	ldi	r24, 0x42	; 66
     dee:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <chance>
     df2:	0b c0       	rjmp	.+22     	; 0xe0a <_Z5checkiiiic+0x1e2>
		}
		else if (player == 'C')
     df4:	03 34       	cpi	r16, 0x43	; 67
     df6:	21 f4       	brne	.+8      	; 0xe00 <_Z5checkiiiic+0x1d8>
		{
			chance = 'C';
     df8:	83 e4       	ldi	r24, 0x43	; 67
     dfa:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <chance>
     dfe:	05 c0       	rjmp	.+10     	; 0xe0a <_Z5checkiiiic+0x1e2>
		}
		else if (player == 'D')
     e00:	04 34       	cpi	r16, 0x44	; 68
     e02:	19 f4       	brne	.+6      	; 0xe0a <_Z5checkiiiic+0x1e2>
		{
			chance = 'D';
     e04:	84 e4       	ldi	r24, 0x44	; 68
     e06:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <chance>
		}
		
		
		
		set_curnt_pos();			//Set current pos of all players
     e0a:	0e 94 f7 05 	call	0xbee	; 0xbee <_Z13set_curnt_posv>
		MAX7219_clear_8X8();
     e0e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
		update_Disp();		//Send player A to his yard
     e12:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
	}
}
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	ff 90       	pop	r15
     e20:	ef 90       	pop	r14
     e22:	df 90       	pop	r13
     e24:	cf 90       	pop	r12
     e26:	bf 90       	pop	r11
     e28:	08 95       	ret

00000e2a <_Z10set_numberv>:
/*----------------------------------------------------converting to a number-------------------------------------------------*/

//Return number according to char value
int set_number()
{
	if (RND_number=='1')
     e2a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
     e2e:	81 33       	cpi	r24, 0x31	; 49
     e30:	69 f0       	breq	.+26     	; 0xe4c <_Z10set_numberv+0x22>
	{
		return 1;
	}
	else if (RND_number == '2')
     e32:	82 33       	cpi	r24, 0x32	; 50
     e34:	71 f0       	breq	.+28     	; 0xe52 <_Z10set_numberv+0x28>
	{
		return 2;
	}
	else if (RND_number == '3')
     e36:	83 33       	cpi	r24, 0x33	; 51
     e38:	79 f0       	breq	.+30     	; 0xe58 <_Z10set_numberv+0x2e>
	{
		return 3;
	}
	else if (RND_number == '4')
     e3a:	84 33       	cpi	r24, 0x34	; 52
     e3c:	81 f0       	breq	.+32     	; 0xe5e <_Z10set_numberv+0x34>
	{
		return 4;
	}
	else if (RND_number == '5')
     e3e:	85 33       	cpi	r24, 0x35	; 53
     e40:	89 f0       	breq	.+34     	; 0xe64 <_Z10set_numberv+0x3a>
	{
		return 5;
	}
	else if (RND_number == '6')
     e42:	86 33       	cpi	r24, 0x36	; 54
     e44:	91 f0       	breq	.+36     	; 0xe6a <_Z10set_numberv+0x40>
	{
		return 6;
	}
	else
	{
		return 0;
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	08 95       	ret
//Return number according to char value
int set_number()
{
	if (RND_number=='1')
	{
		return 1;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	08 95       	ret
	}
	else if (RND_number == '2')
	{
		return 2;
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	08 95       	ret
	}
	else if (RND_number == '3')
	{
		return 3;
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	08 95       	ret
	}
	else if (RND_number == '4')
	{
		return 4;
     e5e:	84 e0       	ldi	r24, 0x04	; 4
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	08 95       	ret
	}
	else if (RND_number == '5')
	{
		return 5;
     e64:	85 e0       	ldi	r24, 0x05	; 5
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	08 95       	ret
	}
	else if (RND_number == '6')
	{
		return 6;
     e6a:	86 e0       	ldi	r24, 0x06	; 6
     e6c:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     e6e:	08 95       	ret

00000e70 <_Z7playerAi>:

/*------------------------------------------------------------Player A-----------------------------------------------------*/

/*Function to move the point of player A*/
void playerA (int Random_number)
{
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	8c 01       	movw	r16, r24
	int previous_Pos = curnt_Pos_playerA;
     e7e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <curnt_Pos_playerA>
     e82:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <curnt_Pos_playerA+0x1>
	
	if (curnt_Pos_playerA == init_A)
     e86:	85 36       	cpi	r24, 0x65	; 101
     e88:	91 05       	cpc	r25, r1
     e8a:	f9 f4       	brne	.+62     	; 0xeca <_Z7playerAi+0x5a>
	{
		if (Random_number == 6)
     e8c:	06 30       	cpi	r16, 0x06	; 6
     e8e:	11 05       	cpc	r17, r1
     e90:	09 f0       	breq	.+2      	; 0xe94 <_Z7playerAi+0x24>
     e92:	87 c0       	rjmp	.+270    	; 0xfa2 <_Z7playerAi+0x132>
		{
			curnt_Pos_playerA = 1;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <curnt_Pos_playerA+0x1>
     e9c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <curnt_Pos_playerA>
			set_Path(101,false);
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	85 e6       	ldi	r24, 0x65	; 101
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
			set_curnt_pos();
     eaa:	0e 94 f7 05 	call	0xbee	; 0xbee <_Z13set_curnt_posv>
			MAX7219_clear_8X8();
     eae:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
			update_Disp();			//Set positions on display and update
     eb2:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
     eb6:	2f ef       	ldi	r18, 0xFF	; 255
     eb8:	84 e3       	ldi	r24, 0x34	; 52
     eba:	9c e0       	ldi	r25, 0x0C	; 12
     ebc:	21 50       	subi	r18, 0x01	; 1
     ebe:	80 40       	sbci	r24, 0x00	; 0
     ec0:	90 40       	sbci	r25, 0x00	; 0
     ec2:	e1 f7       	brne	.-8      	; 0xebc <_Z7playerAi+0x4c>
     ec4:	00 c0       	rjmp	.+0      	; 0xec6 <_Z7playerAi+0x56>
     ec6:	00 00       	nop
     ec8:	7c c0       	rjmp	.+248    	; 0xfc2 <_Z7playerAi+0x152>
			_delay_ms(500);
		}
	}
	else if (remaining_distance_p1 >= Random_number)
     eca:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <remaining_distance_p1>
     ece:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <remaining_distance_p1+0x1>
     ed2:	20 17       	cp	r18, r16
     ed4:	31 07       	cpc	r19, r17
     ed6:	0c f4       	brge	.+2      	; 0xeda <_Z7playerAi+0x6a>
     ed8:	61 c0       	rjmp	.+194    	; 0xf9c <_Z7playerAi+0x12c>
	{
		for (int i=0; i<Random_number; i++)
     eda:	10 16       	cp	r1, r16
     edc:	11 06       	cpc	r1, r17
     ede:	0c f0       	brlt	.+2      	; 0xee2 <_Z7playerAi+0x72>
     ee0:	5d c0       	rjmp	.+186    	; 0xf9c <_Z7playerAi+0x12c>
     ee2:	c0 e0       	ldi	r28, 0x00	; 0
     ee4:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if (previous_Pos == 28)
			{
				curnt_Pos_playerA = 1;
     ee6:	ee 24       	eor	r14, r14
     ee8:	e3 94       	inc	r14
     eea:	f1 2c       	mov	r15, r1
	}
	else if (remaining_distance_p1 >= Random_number)
	{
		for (int i=0; i<Random_number; i++)
		{
			if (previous_Pos == 28)
     eec:	8c 31       	cpi	r24, 0x1C	; 28
     eee:	91 05       	cpc	r25, r1
     ef0:	31 f5       	brne	.+76     	; 0xf3e <_Z7playerAi+0xce>
			{
				curnt_Pos_playerA = 1;
     ef2:	f0 92 12 02 	sts	0x0212, r15	; 0x800212 <curnt_Pos_playerA+0x1>
     ef6:	e0 92 11 02 	sts	0x0211, r14	; 0x800211 <curnt_Pos_playerA>
				remaining_distance_p1--;
     efa:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <remaining_distance_p1>
     efe:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <remaining_distance_p1+0x1>
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <remaining_distance_p1+0x1>
     f08:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <remaining_distance_p1>
				set_Path(previous_Pos, false);
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	8c e1       	ldi	r24, 0x1C	; 28
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
				set_curnt_pos();
     f16:	0e 94 f7 05 	call	0xbee	; 0xbee <_Z13set_curnt_posv>
				MAX7219_clear_8X8();
     f1a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
				update_Disp();							//Move point and update display
     f1e:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
     f22:	2f ef       	ldi	r18, 0xFF	; 255
     f24:	84 e3       	ldi	r24, 0x34	; 52
     f26:	9c e0       	ldi	r25, 0x0C	; 12
     f28:	21 50       	subi	r18, 0x01	; 1
     f2a:	80 40       	sbci	r24, 0x00	; 0
     f2c:	90 40       	sbci	r25, 0x00	; 0
     f2e:	e1 f7       	brne	.-8      	; 0xf28 <_Z7playerAi+0xb8>
     f30:	00 c0       	rjmp	.+0      	; 0xf32 <_Z7playerAi+0xc2>
     f32:	00 00       	nop
				_delay_ms(500);
				previous_Pos = curnt_Pos_playerA;
     f34:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <curnt_Pos_playerA>
     f38:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <curnt_Pos_playerA+0x1>
     f3c:	2a c0       	rjmp	.+84     	; 0xf92 <_Z7playerAi+0x122>
			}
			else
			{
				curnt_Pos_playerA++;
     f3e:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <curnt_Pos_playerA>
     f42:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <curnt_Pos_playerA+0x1>
     f46:	2f 5f       	subi	r18, 0xFF	; 255
     f48:	3f 4f       	sbci	r19, 0xFF	; 255
     f4a:	30 93 12 02 	sts	0x0212, r19	; 0x800212 <curnt_Pos_playerA+0x1>
     f4e:	20 93 11 02 	sts	0x0211, r18	; 0x800211 <curnt_Pos_playerA>
				remaining_distance_p1--;
     f52:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <remaining_distance_p1>
     f56:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <remaining_distance_p1+0x1>
     f5a:	21 50       	subi	r18, 0x01	; 1
     f5c:	31 09       	sbc	r19, r1
     f5e:	30 93 08 02 	sts	0x0208, r19	; 0x800208 <remaining_distance_p1+0x1>
     f62:	20 93 07 02 	sts	0x0207, r18	; 0x800207 <remaining_distance_p1>
				set_Path(previous_Pos, false);
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
				set_curnt_pos();
     f6c:	0e 94 f7 05 	call	0xbee	; 0xbee <_Z13set_curnt_posv>
				MAX7219_clear_8X8();
     f70:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
				update_Disp();							//Move point and update display
     f74:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
     f78:	2f ef       	ldi	r18, 0xFF	; 255
     f7a:	84 e3       	ldi	r24, 0x34	; 52
     f7c:	9c e0       	ldi	r25, 0x0C	; 12
     f7e:	21 50       	subi	r18, 0x01	; 1
     f80:	80 40       	sbci	r24, 0x00	; 0
     f82:	90 40       	sbci	r25, 0x00	; 0
     f84:	e1 f7       	brne	.-8      	; 0xf7e <_Z7playerAi+0x10e>
     f86:	00 c0       	rjmp	.+0      	; 0xf88 <_Z7playerAi+0x118>
     f88:	00 00       	nop
				_delay_ms(500);
				previous_Pos = curnt_Pos_playerA;
     f8a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <curnt_Pos_playerA>
     f8e:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <curnt_Pos_playerA+0x1>
			_delay_ms(500);
		}
	}
	else if (remaining_distance_p1 >= Random_number)
	{
		for (int i=0; i<Random_number; i++)
     f92:	21 96       	adiw	r28, 0x01	; 1
     f94:	0c 17       	cp	r16, r28
     f96:	1d 07       	cpc	r17, r29
     f98:	09 f0       	breq	.+2      	; 0xf9c <_Z7playerAi+0x12c>
     f9a:	a8 cf       	rjmp	.-176    	; 0xeec <_Z7playerAi+0x7c>
			}
		}
	}
	
	/*If random number is not equal to 1 or 6 chance goes to next player*/
	if (!(Random_number == 6))
     f9c:	06 30       	cpi	r16, 0x06	; 6
     f9e:	11 05       	cpc	r17, r1
     fa0:	81 f0       	breq	.+32     	; 0xfc2 <_Z7playerAi+0x152>
	{
		if (no_players == 2)
     fa2:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <no_players>
     fa6:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <no_players+0x1>
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	91 05       	cpc	r25, r1
     fae:	21 f4       	brne	.+8      	; 0xfb8 <_Z7playerAi+0x148>
		{
			chance = 'C';
     fb0:	83 e4       	ldi	r24, 0x43	; 67
     fb2:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <chance>
     fb6:	05 c0       	rjmp	.+10     	; 0xfc2 <_Z7playerAi+0x152>
		}
		else if (no_players == 4)
     fb8:	04 97       	sbiw	r24, 0x04	; 4
     fba:	19 f4       	brne	.+6      	; 0xfc2 <_Z7playerAi+0x152>
		{
			chance = 'B';
     fbc:	82 e4       	ldi	r24, 0x42	; 66
     fbe:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <chance>
		}
	}
	
	/*If remainig distance is 0, then the game is over*/
	if (remaining_distance_p1 == 0)
     fc2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <remaining_distance_p1>
     fc6:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <remaining_distance_p1+0x1>
     fca:	89 2b       	or	r24, r25
     fcc:	71 f4       	brne	.+28     	; 0xfea <_Z7playerAi+0x17a>
	{
		chance = '0';
     fce:	80 e3       	ldi	r24, 0x30	; 48
     fd0:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <chance>
		no_players = -1;
     fd4:	8f ef       	ldi	r24, 0xFF	; 255
     fd6:	9f ef       	ldi	r25, 0xFF	; 255
     fd8:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <no_players+0x1>
     fdc:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <no_players>
		onGame = false;
     fe0:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <onGame>
		winner = 'A';
     fe4:	81 e4       	ldi	r24, 0x41	; 65
     fe6:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <winner>
	}
	
	
	/* If oponant player is on the current position of the player, and not a safe position oponant player returns to his yard*/
	
	if (!(check_Safe(curnt_Pos_playerA)))
     fea:	c0 91 11 02 	lds	r28, 0x0211	; 0x800211 <curnt_Pos_playerA>
     fee:	d0 91 12 02 	lds	r29, 0x0212	; 0x800212 <curnt_Pos_playerA+0x1>
     ff2:	ce 01       	movw	r24, r28
     ff4:	0e 94 00 04 	call	0x800	; 0x800 <_Z10check_Safei>
     ff8:	81 11       	cpse	r24, r1
     ffa:	2e c0       	rjmp	.+92     	; 0x1058 <_Z7playerAi+0x1e8>
	{
		//Checking for player B
		check(curnt_Pos_playerA,curnt_Pos_playerB,remaining_distance_p2,init_B,'A');
     ffc:	40 91 05 02 	lds	r20, 0x0205	; 0x800205 <remaining_distance_p2>
    1000:	50 91 06 02 	lds	r21, 0x0206	; 0x800206 <remaining_distance_p2+0x1>
    1004:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <curnt_Pos_playerB>
    1008:	70 91 10 02 	lds	r23, 0x0210	; 0x800210 <curnt_Pos_playerB+0x1>
    100c:	01 e4       	ldi	r16, 0x41	; 65
    100e:	26 e6       	ldi	r18, 0x66	; 102
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	ce 01       	movw	r24, r28
    1014:	0e 94 14 06 	call	0xc28	; 0xc28 <_Z5checkiiiic>
		
		//Checking for player C
		check(curnt_Pos_playerA,curnt_Pos_playerC,remaining_distance_p3,init_C,'A');
    1018:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <remaining_distance_p3>
    101c:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <remaining_distance_p3+0x1>
    1020:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <curnt_Pos_playerC>
    1024:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <curnt_Pos_playerC+0x1>
    1028:	27 e6       	ldi	r18, 0x67	; 103
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <curnt_Pos_playerA>
    1030:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <curnt_Pos_playerA+0x1>
    1034:	0e 94 14 06 	call	0xc28	; 0xc28 <_Z5checkiiiic>
		
		//Checking for player D
		check(curnt_Pos_playerA,curnt_Pos_playerD,remaining_distance_p4,init_D,'A');
    1038:	40 91 01 02 	lds	r20, 0x0201	; 0x800201 <remaining_distance_p4>
    103c:	50 91 02 02 	lds	r21, 0x0202	; 0x800202 <remaining_distance_p4+0x1>
    1040:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <curnt_Pos_playerD>
    1044:	70 91 0c 02 	lds	r23, 0x020C	; 0x80020c <curnt_Pos_playerD+0x1>
    1048:	28 e6       	ldi	r18, 0x68	; 104
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <curnt_Pos_playerA>
    1050:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <curnt_Pos_playerA+0x1>
    1054:	0e 94 14 06 	call	0xc28	; 0xc28 <_Z5checkiiiic>
	}
	
}
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	ff 90       	pop	r15
    1062:	ef 90       	pop	r14
    1064:	08 95       	ret

00001066 <_Z7playerBi>:

/*------------------------------------------------------------Player B-----------------------------------------------------*/

/*Function to move the point of player B*/
void playerB (int Random_number)
{
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	8c 01       	movw	r16, r24
	int previous_Pos = curnt_Pos_playerB;
    1074:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <curnt_Pos_playerB>
    1078:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <curnt_Pos_playerB+0x1>
	
	if (curnt_Pos_playerB == init_B)
    107c:	86 36       	cpi	r24, 0x66	; 102
    107e:	91 05       	cpc	r25, r1
    1080:	f9 f4       	brne	.+62     	; 0x10c0 <_Z7playerBi+0x5a>
	{
		if (Random_number == 6)
    1082:	06 30       	cpi	r16, 0x06	; 6
    1084:	11 05       	cpc	r17, r1
    1086:	09 f0       	breq	.+2      	; 0x108a <_Z7playerBi+0x24>
    1088:	87 c0       	rjmp	.+270    	; 0x1198 <_Z7playerBi+0x132>
		{
			curnt_Pos_playerB = 8;
    108a:	88 e0       	ldi	r24, 0x08	; 8
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <curnt_Pos_playerB+0x1>
    1092:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <curnt_Pos_playerB>
			set_Path(102,false);
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	86 e6       	ldi	r24, 0x66	; 102
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
			set_curnt_pos();
    10a0:	0e 94 f7 05 	call	0xbee	; 0xbee <_Z13set_curnt_posv>
			MAX7219_clear_8X8();
    10a4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
			update_Disp();			//Set positions on display and update
    10a8:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
    10ac:	2f ef       	ldi	r18, 0xFF	; 255
    10ae:	84 e3       	ldi	r24, 0x34	; 52
    10b0:	9c e0       	ldi	r25, 0x0C	; 12
    10b2:	21 50       	subi	r18, 0x01	; 1
    10b4:	80 40       	sbci	r24, 0x00	; 0
    10b6:	90 40       	sbci	r25, 0x00	; 0
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <_Z7playerBi+0x4c>
    10ba:	00 c0       	rjmp	.+0      	; 0x10bc <_Z7playerBi+0x56>
    10bc:	00 00       	nop
    10be:	6f c0       	rjmp	.+222    	; 0x119e <_Z7playerBi+0x138>
			_delay_ms(500);
		}
	}
	else if (remaining_distance_p2 >= Random_number)
    10c0:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <remaining_distance_p2>
    10c4:	30 91 06 02 	lds	r19, 0x0206	; 0x800206 <remaining_distance_p2+0x1>
    10c8:	20 17       	cp	r18, r16
    10ca:	31 07       	cpc	r19, r17
    10cc:	0c f4       	brge	.+2      	; 0x10d0 <_Z7playerBi+0x6a>
    10ce:	61 c0       	rjmp	.+194    	; 0x1192 <_Z7playerBi+0x12c>
	{
		for (int i=0; i<Random_number; i++)
    10d0:	10 16       	cp	r1, r16
    10d2:	11 06       	cpc	r1, r17
    10d4:	0c f0       	brlt	.+2      	; 0x10d8 <_Z7playerBi+0x72>
    10d6:	5d c0       	rjmp	.+186    	; 0x1192 <_Z7playerBi+0x12c>
    10d8:	c0 e0       	ldi	r28, 0x00	; 0
    10da:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if (previous_Pos == 28)
			{
				curnt_Pos_playerB = 1;
    10dc:	ee 24       	eor	r14, r14
    10de:	e3 94       	inc	r14
    10e0:	f1 2c       	mov	r15, r1
	}
	else if (remaining_distance_p2 >= Random_number)
	{
		for (int i=0; i<Random_number; i++)
		{
			if (previous_Pos == 28)
    10e2:	8c 31       	cpi	r24, 0x1C	; 28
    10e4:	91 05       	cpc	r25, r1
    10e6:	31 f5       	brne	.+76     	; 0x1134 <_Z7playerBi+0xce>
			{
				curnt_Pos_playerB = 1;
    10e8:	f0 92 10 02 	sts	0x0210, r15	; 0x800210 <curnt_Pos_playerB+0x1>
    10ec:	e0 92 0f 02 	sts	0x020F, r14	; 0x80020f <curnt_Pos_playerB>
				remaining_distance_p2--;
    10f0:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <remaining_distance_p2>
    10f4:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <remaining_distance_p2+0x1>
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <remaining_distance_p2+0x1>
    10fe:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <remaining_distance_p2>
				set_Path(previous_Pos, false);
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	8c e1       	ldi	r24, 0x1C	; 28
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
				set_curnt_pos();
    110c:	0e 94 f7 05 	call	0xbee	; 0xbee <_Z13set_curnt_posv>
				MAX7219_clear_8X8();
    1110:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
				update_Disp();							//Move point and update display
    1114:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
    1118:	2f ef       	ldi	r18, 0xFF	; 255
    111a:	84 e3       	ldi	r24, 0x34	; 52
    111c:	9c e0       	ldi	r25, 0x0C	; 12
    111e:	21 50       	subi	r18, 0x01	; 1
    1120:	80 40       	sbci	r24, 0x00	; 0
    1122:	90 40       	sbci	r25, 0x00	; 0
    1124:	e1 f7       	brne	.-8      	; 0x111e <_Z7playerBi+0xb8>
    1126:	00 c0       	rjmp	.+0      	; 0x1128 <_Z7playerBi+0xc2>
    1128:	00 00       	nop
				_delay_ms(500);
				previous_Pos = curnt_Pos_playerB;
    112a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <curnt_Pos_playerB>
    112e:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <curnt_Pos_playerB+0x1>
    1132:	2a c0       	rjmp	.+84     	; 0x1188 <_Z7playerBi+0x122>
			}
			else
			{
				curnt_Pos_playerB++;
    1134:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <curnt_Pos_playerB>
    1138:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <curnt_Pos_playerB+0x1>
    113c:	2f 5f       	subi	r18, 0xFF	; 255
    113e:	3f 4f       	sbci	r19, 0xFF	; 255
    1140:	30 93 10 02 	sts	0x0210, r19	; 0x800210 <curnt_Pos_playerB+0x1>
    1144:	20 93 0f 02 	sts	0x020F, r18	; 0x80020f <curnt_Pos_playerB>
				remaining_distance_p2--;
    1148:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <remaining_distance_p2>
    114c:	30 91 06 02 	lds	r19, 0x0206	; 0x800206 <remaining_distance_p2+0x1>
    1150:	21 50       	subi	r18, 0x01	; 1
    1152:	31 09       	sbc	r19, r1
    1154:	30 93 06 02 	sts	0x0206, r19	; 0x800206 <remaining_distance_p2+0x1>
    1158:	20 93 05 02 	sts	0x0205, r18	; 0x800205 <remaining_distance_p2>
				set_Path(previous_Pos, false);
    115c:	60 e0       	ldi	r22, 0x00	; 0
    115e:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
				set_curnt_pos();
    1162:	0e 94 f7 05 	call	0xbee	; 0xbee <_Z13set_curnt_posv>
				MAX7219_clear_8X8();
    1166:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
				update_Disp();							//Move point and update display
    116a:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
    116e:	2f ef       	ldi	r18, 0xFF	; 255
    1170:	84 e3       	ldi	r24, 0x34	; 52
    1172:	9c e0       	ldi	r25, 0x0C	; 12
    1174:	21 50       	subi	r18, 0x01	; 1
    1176:	80 40       	sbci	r24, 0x00	; 0
    1178:	90 40       	sbci	r25, 0x00	; 0
    117a:	e1 f7       	brne	.-8      	; 0x1174 <_Z7playerBi+0x10e>
    117c:	00 c0       	rjmp	.+0      	; 0x117e <_Z7playerBi+0x118>
    117e:	00 00       	nop
				_delay_ms(500);
				previous_Pos = curnt_Pos_playerB;
    1180:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <curnt_Pos_playerB>
    1184:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <curnt_Pos_playerB+0x1>
			_delay_ms(500);
		}
	}
	else if (remaining_distance_p2 >= Random_number)
	{
		for (int i=0; i<Random_number; i++)
    1188:	21 96       	adiw	r28, 0x01	; 1
    118a:	0c 17       	cp	r16, r28
    118c:	1d 07       	cpc	r17, r29
    118e:	09 f0       	breq	.+2      	; 0x1192 <_Z7playerBi+0x12c>
    1190:	a8 cf       	rjmp	.-176    	; 0x10e2 <_Z7playerBi+0x7c>
			}
		}
	}
	
	/*If random number is not equal to 1 or 6 chance goes to next player*/
	if (!(Random_number == 6))
    1192:	06 30       	cpi	r16, 0x06	; 6
    1194:	11 05       	cpc	r17, r1
    1196:	19 f0       	breq	.+6      	; 0x119e <_Z7playerBi+0x138>
	{
		chance = 'C';
    1198:	83 e4       	ldi	r24, 0x43	; 67
    119a:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <chance>
	}
	
	/*If remainig distance is 0, then the game is over*/
	if (remaining_distance_p2 == 0)
    119e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <remaining_distance_p2>
    11a2:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <remaining_distance_p2+0x1>
    11a6:	89 2b       	or	r24, r25
    11a8:	71 f4       	brne	.+28     	; 0x11c6 <_Z7playerBi+0x160>
	{
		chance = '0';
    11aa:	80 e3       	ldi	r24, 0x30	; 48
    11ac:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <chance>
		no_players = -1;
    11b0:	8f ef       	ldi	r24, 0xFF	; 255
    11b2:	9f ef       	ldi	r25, 0xFF	; 255
    11b4:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <no_players+0x1>
    11b8:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <no_players>
		onGame = false;
    11bc:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <onGame>
		winner = 'B';
    11c0:	82 e4       	ldi	r24, 0x42	; 66
    11c2:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <winner>
	}
	
	
	/* If oponant player is on the current position of the player and not in safe place, oponant player returns to his yard*/
	
	if (!(check_Safe(curnt_Pos_playerB)))
    11c6:	c0 91 0f 02 	lds	r28, 0x020F	; 0x80020f <curnt_Pos_playerB>
    11ca:	d0 91 10 02 	lds	r29, 0x0210	; 0x800210 <curnt_Pos_playerB+0x1>
    11ce:	ce 01       	movw	r24, r28
    11d0:	0e 94 00 04 	call	0x800	; 0x800 <_Z10check_Safei>
    11d4:	81 11       	cpse	r24, r1
    11d6:	2e c0       	rjmp	.+92     	; 0x1234 <_Z7playerBi+0x1ce>
	{
		//Checking for player A
		check(curnt_Pos_playerB,curnt_Pos_playerA,remaining_distance_p1,init_A,'B');
    11d8:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <remaining_distance_p1>
    11dc:	50 91 08 02 	lds	r21, 0x0208	; 0x800208 <remaining_distance_p1+0x1>
    11e0:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <curnt_Pos_playerA>
    11e4:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <curnt_Pos_playerA+0x1>
    11e8:	02 e4       	ldi	r16, 0x42	; 66
    11ea:	25 e6       	ldi	r18, 0x65	; 101
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	ce 01       	movw	r24, r28
    11f0:	0e 94 14 06 	call	0xc28	; 0xc28 <_Z5checkiiiic>
		
		//Checking for player C
		check(curnt_Pos_playerB,curnt_Pos_playerC,remaining_distance_p3,init_C,'B');
    11f4:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <remaining_distance_p3>
    11f8:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <remaining_distance_p3+0x1>
    11fc:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <curnt_Pos_playerC>
    1200:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <curnt_Pos_playerC+0x1>
    1204:	27 e6       	ldi	r18, 0x67	; 103
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <curnt_Pos_playerB>
    120c:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <curnt_Pos_playerB+0x1>
    1210:	0e 94 14 06 	call	0xc28	; 0xc28 <_Z5checkiiiic>
		
		//Checking for player D
		check(curnt_Pos_playerB,curnt_Pos_playerD,remaining_distance_p4,init_D,'B');
    1214:	40 91 01 02 	lds	r20, 0x0201	; 0x800201 <remaining_distance_p4>
    1218:	50 91 02 02 	lds	r21, 0x0202	; 0x800202 <remaining_distance_p4+0x1>
    121c:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <curnt_Pos_playerD>
    1220:	70 91 0c 02 	lds	r23, 0x020C	; 0x80020c <curnt_Pos_playerD+0x1>
    1224:	28 e6       	ldi	r18, 0x68	; 104
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <curnt_Pos_playerB>
    122c:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <curnt_Pos_playerB+0x1>
    1230:	0e 94 14 06 	call	0xc28	; 0xc28 <_Z5checkiiiic>
	}
}
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	ff 90       	pop	r15
    123e:	ef 90       	pop	r14
    1240:	08 95       	ret

00001242 <_Z7playerCi>:

/*------------------------------------------------------------Player C-----------------------------------------------------*/

/*Function to move the point of player C*/
void playerC (int Random_number)
{
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	8c 01       	movw	r16, r24
	int previous_Pos = curnt_Pos_playerC;
    1250:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <curnt_Pos_playerC>
    1254:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <curnt_Pos_playerC+0x1>
	
	if (curnt_Pos_playerC == init_C)
    1258:	87 36       	cpi	r24, 0x67	; 103
    125a:	91 05       	cpc	r25, r1
    125c:	f9 f4       	brne	.+62     	; 0x129c <_Z7playerCi+0x5a>
	{
		if (Random_number == 6)
    125e:	06 30       	cpi	r16, 0x06	; 6
    1260:	11 05       	cpc	r17, r1
    1262:	09 f0       	breq	.+2      	; 0x1266 <_Z7playerCi+0x24>
    1264:	87 c0       	rjmp	.+270    	; 0x1374 <_Z7playerCi+0x132>
		{
			curnt_Pos_playerC = 15;
    1266:	8f e0       	ldi	r24, 0x0F	; 15
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <curnt_Pos_playerC+0x1>
    126e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <curnt_Pos_playerC>
			set_Path(103,false);
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	87 e6       	ldi	r24, 0x67	; 103
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
			set_curnt_pos();
    127c:	0e 94 f7 05 	call	0xbee	; 0xbee <_Z13set_curnt_posv>
			MAX7219_clear_8X8();
    1280:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
			update_Disp();			//Set positions on display and update
    1284:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
    1288:	2f ef       	ldi	r18, 0xFF	; 255
    128a:	84 e3       	ldi	r24, 0x34	; 52
    128c:	9c e0       	ldi	r25, 0x0C	; 12
    128e:	21 50       	subi	r18, 0x01	; 1
    1290:	80 40       	sbci	r24, 0x00	; 0
    1292:	90 40       	sbci	r25, 0x00	; 0
    1294:	e1 f7       	brne	.-8      	; 0x128e <_Z7playerCi+0x4c>
    1296:	00 c0       	rjmp	.+0      	; 0x1298 <_Z7playerCi+0x56>
    1298:	00 00       	nop
    129a:	7c c0       	rjmp	.+248    	; 0x1394 <_Z7playerCi+0x152>
			_delay_ms(500);
		}
	}
	else if (remaining_distance_p3 >= Random_number)
    129c:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <remaining_distance_p3>
    12a0:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <remaining_distance_p3+0x1>
    12a4:	20 17       	cp	r18, r16
    12a6:	31 07       	cpc	r19, r17
    12a8:	0c f4       	brge	.+2      	; 0x12ac <_Z7playerCi+0x6a>
    12aa:	61 c0       	rjmp	.+194    	; 0x136e <_Z7playerCi+0x12c>
	{
		for (int i=0; i<Random_number; i++)
    12ac:	10 16       	cp	r1, r16
    12ae:	11 06       	cpc	r1, r17
    12b0:	0c f0       	brlt	.+2      	; 0x12b4 <_Z7playerCi+0x72>
    12b2:	5d c0       	rjmp	.+186    	; 0x136e <_Z7playerCi+0x12c>
    12b4:	c0 e0       	ldi	r28, 0x00	; 0
    12b6:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if (previous_Pos == 28)
			{
				curnt_Pos_playerC = 1;
    12b8:	ee 24       	eor	r14, r14
    12ba:	e3 94       	inc	r14
    12bc:	f1 2c       	mov	r15, r1
	}
	else if (remaining_distance_p3 >= Random_number)
	{
		for (int i=0; i<Random_number; i++)
		{
			if (previous_Pos == 28)
    12be:	8c 31       	cpi	r24, 0x1C	; 28
    12c0:	91 05       	cpc	r25, r1
    12c2:	31 f5       	brne	.+76     	; 0x1310 <_Z7playerCi+0xce>
			{
				curnt_Pos_playerC = 1;
    12c4:	f0 92 0e 02 	sts	0x020E, r15	; 0x80020e <curnt_Pos_playerC+0x1>
    12c8:	e0 92 0d 02 	sts	0x020D, r14	; 0x80020d <curnt_Pos_playerC>
				remaining_distance_p3--;
    12cc:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <remaining_distance_p3>
    12d0:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <remaining_distance_p3+0x1>
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <remaining_distance_p3+0x1>
    12da:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <remaining_distance_p3>
				set_Path(previous_Pos, false);
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	8c e1       	ldi	r24, 0x1C	; 28
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
				set_curnt_pos();
    12e8:	0e 94 f7 05 	call	0xbee	; 0xbee <_Z13set_curnt_posv>
				MAX7219_clear_8X8();
    12ec:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
				update_Disp();							//Move point and update display
    12f0:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
    12f4:	2f ef       	ldi	r18, 0xFF	; 255
    12f6:	84 e3       	ldi	r24, 0x34	; 52
    12f8:	9c e0       	ldi	r25, 0x0C	; 12
    12fa:	21 50       	subi	r18, 0x01	; 1
    12fc:	80 40       	sbci	r24, 0x00	; 0
    12fe:	90 40       	sbci	r25, 0x00	; 0
    1300:	e1 f7       	brne	.-8      	; 0x12fa <_Z7playerCi+0xb8>
    1302:	00 c0       	rjmp	.+0      	; 0x1304 <_Z7playerCi+0xc2>
    1304:	00 00       	nop
				_delay_ms(500);
				previous_Pos = curnt_Pos_playerC;
    1306:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <curnt_Pos_playerC>
    130a:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <curnt_Pos_playerC+0x1>
    130e:	2a c0       	rjmp	.+84     	; 0x1364 <_Z7playerCi+0x122>
			}
			else
			{
				curnt_Pos_playerC++;
    1310:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <curnt_Pos_playerC>
    1314:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <curnt_Pos_playerC+0x1>
    1318:	2f 5f       	subi	r18, 0xFF	; 255
    131a:	3f 4f       	sbci	r19, 0xFF	; 255
    131c:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <curnt_Pos_playerC+0x1>
    1320:	20 93 0d 02 	sts	0x020D, r18	; 0x80020d <curnt_Pos_playerC>
				remaining_distance_p3--;
    1324:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <remaining_distance_p3>
    1328:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <remaining_distance_p3+0x1>
    132c:	21 50       	subi	r18, 0x01	; 1
    132e:	31 09       	sbc	r19, r1
    1330:	30 93 04 02 	sts	0x0204, r19	; 0x800204 <remaining_distance_p3+0x1>
    1334:	20 93 03 02 	sts	0x0203, r18	; 0x800203 <remaining_distance_p3>
				set_Path(previous_Pos, false);
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
				set_curnt_pos();
    133e:	0e 94 f7 05 	call	0xbee	; 0xbee <_Z13set_curnt_posv>
				MAX7219_clear_8X8();
    1342:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
				update_Disp();							//Move point and update display
    1346:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
    134a:	2f ef       	ldi	r18, 0xFF	; 255
    134c:	84 e3       	ldi	r24, 0x34	; 52
    134e:	9c e0       	ldi	r25, 0x0C	; 12
    1350:	21 50       	subi	r18, 0x01	; 1
    1352:	80 40       	sbci	r24, 0x00	; 0
    1354:	90 40       	sbci	r25, 0x00	; 0
    1356:	e1 f7       	brne	.-8      	; 0x1350 <_Z7playerCi+0x10e>
    1358:	00 c0       	rjmp	.+0      	; 0x135a <_Z7playerCi+0x118>
    135a:	00 00       	nop
				_delay_ms(500);
				previous_Pos = curnt_Pos_playerC;
    135c:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <curnt_Pos_playerC>
    1360:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <curnt_Pos_playerC+0x1>
			_delay_ms(500);
		}
	}
	else if (remaining_distance_p3 >= Random_number)
	{
		for (int i=0; i<Random_number; i++)
    1364:	21 96       	adiw	r28, 0x01	; 1
    1366:	0c 17       	cp	r16, r28
    1368:	1d 07       	cpc	r17, r29
    136a:	09 f0       	breq	.+2      	; 0x136e <_Z7playerCi+0x12c>
    136c:	a8 cf       	rjmp	.-176    	; 0x12be <_Z7playerCi+0x7c>
			}
		}
	}
	
	/*If random number is not equal to 1 or 6 chance goes to next player*/
	if (!(Random_number == 6))
    136e:	06 30       	cpi	r16, 0x06	; 6
    1370:	11 05       	cpc	r17, r1
    1372:	81 f0       	breq	.+32     	; 0x1394 <_Z7playerCi+0x152>
	{
		if (no_players == 2)
    1374:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <no_players>
    1378:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <no_players+0x1>
    137c:	82 30       	cpi	r24, 0x02	; 2
    137e:	91 05       	cpc	r25, r1
    1380:	21 f4       	brne	.+8      	; 0x138a <_Z7playerCi+0x148>
		{
			chance = 'A';
    1382:	81 e4       	ldi	r24, 0x41	; 65
    1384:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <chance>
    1388:	05 c0       	rjmp	.+10     	; 0x1394 <_Z7playerCi+0x152>
		}
		else if (no_players == 4)
    138a:	04 97       	sbiw	r24, 0x04	; 4
    138c:	19 f4       	brne	.+6      	; 0x1394 <_Z7playerCi+0x152>
		{
			chance = 'D';
    138e:	84 e4       	ldi	r24, 0x44	; 68
    1390:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <chance>
		}
	}
	
	/*If remainig distance is 0, then the game is over*/
	if (remaining_distance_p3 == 0)
    1394:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <remaining_distance_p3>
    1398:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <remaining_distance_p3+0x1>
    139c:	89 2b       	or	r24, r25
    139e:	71 f4       	brne	.+28     	; 0x13bc <_Z7playerCi+0x17a>
	{
		chance = '0';
    13a0:	80 e3       	ldi	r24, 0x30	; 48
    13a2:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <chance>
		no_players = -1;
    13a6:	8f ef       	ldi	r24, 0xFF	; 255
    13a8:	9f ef       	ldi	r25, 0xFF	; 255
    13aa:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <no_players+0x1>
    13ae:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <no_players>
		onGame = false;
    13b2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <onGame>
		winner = 'C';
    13b6:	83 e4       	ldi	r24, 0x43	; 67
    13b8:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <winner>
	
	
	/* If oponant player is on the current position of the player and not in a safe position, oponant player returns to his yard*/
	
	
	if (!(check_Safe(curnt_Pos_playerC)))
    13bc:	c0 91 0d 02 	lds	r28, 0x020D	; 0x80020d <curnt_Pos_playerC>
    13c0:	d0 91 0e 02 	lds	r29, 0x020E	; 0x80020e <curnt_Pos_playerC+0x1>
    13c4:	ce 01       	movw	r24, r28
    13c6:	0e 94 00 04 	call	0x800	; 0x800 <_Z10check_Safei>
    13ca:	81 11       	cpse	r24, r1
    13cc:	2e c0       	rjmp	.+92     	; 0x142a <_Z7playerCi+0x1e8>
	{
		//Checking for player A
		check(curnt_Pos_playerC,curnt_Pos_playerA,remaining_distance_p1,init_A,'C');
    13ce:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <remaining_distance_p1>
    13d2:	50 91 08 02 	lds	r21, 0x0208	; 0x800208 <remaining_distance_p1+0x1>
    13d6:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <curnt_Pos_playerA>
    13da:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <curnt_Pos_playerA+0x1>
    13de:	03 e4       	ldi	r16, 0x43	; 67
    13e0:	25 e6       	ldi	r18, 0x65	; 101
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	ce 01       	movw	r24, r28
    13e6:	0e 94 14 06 	call	0xc28	; 0xc28 <_Z5checkiiiic>
		
		//Checking for player B
		check(curnt_Pos_playerC,curnt_Pos_playerB,remaining_distance_p2,init_B,'C');
    13ea:	40 91 05 02 	lds	r20, 0x0205	; 0x800205 <remaining_distance_p2>
    13ee:	50 91 06 02 	lds	r21, 0x0206	; 0x800206 <remaining_distance_p2+0x1>
    13f2:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <curnt_Pos_playerB>
    13f6:	70 91 10 02 	lds	r23, 0x0210	; 0x800210 <curnt_Pos_playerB+0x1>
    13fa:	26 e6       	ldi	r18, 0x66	; 102
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <curnt_Pos_playerC>
    1402:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <curnt_Pos_playerC+0x1>
    1406:	0e 94 14 06 	call	0xc28	; 0xc28 <_Z5checkiiiic>
		
		//Checking for player D
		check(curnt_Pos_playerC,curnt_Pos_playerD,remaining_distance_p4,init_D, 'C');
    140a:	40 91 01 02 	lds	r20, 0x0201	; 0x800201 <remaining_distance_p4>
    140e:	50 91 02 02 	lds	r21, 0x0202	; 0x800202 <remaining_distance_p4+0x1>
    1412:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <curnt_Pos_playerD>
    1416:	70 91 0c 02 	lds	r23, 0x020C	; 0x80020c <curnt_Pos_playerD+0x1>
    141a:	28 e6       	ldi	r18, 0x68	; 104
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <curnt_Pos_playerC>
    1422:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <curnt_Pos_playerC+0x1>
    1426:	0e 94 14 06 	call	0xc28	; 0xc28 <_Z5checkiiiic>
	}
}
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	ff 90       	pop	r15
    1434:	ef 90       	pop	r14
    1436:	08 95       	ret

00001438 <_Z7playerDi>:

/*------------------------------------------------------------Player D-----------------------------------------------------*/

/*Function to move the point of player D*/
void playerD (int Random_number)
{
    1438:	ef 92       	push	r14
    143a:	ff 92       	push	r15
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	8c 01       	movw	r16, r24
	int previous_Pos = curnt_Pos_playerD;
    1446:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <curnt_Pos_playerD>
    144a:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <curnt_Pos_playerD+0x1>
	
	if (curnt_Pos_playerD == init_D)
    144e:	88 36       	cpi	r24, 0x68	; 104
    1450:	91 05       	cpc	r25, r1
    1452:	f9 f4       	brne	.+62     	; 0x1492 <_Z7playerDi+0x5a>
	{
		if (Random_number == 6)
    1454:	06 30       	cpi	r16, 0x06	; 6
    1456:	11 05       	cpc	r17, r1
    1458:	09 f0       	breq	.+2      	; 0x145c <_Z7playerDi+0x24>
    145a:	87 c0       	rjmp	.+270    	; 0x156a <_Z7playerDi+0x132>
		{
			curnt_Pos_playerD = 22;
    145c:	86 e1       	ldi	r24, 0x16	; 22
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <curnt_Pos_playerD+0x1>
    1464:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <curnt_Pos_playerD>
			set_Path(104,false);
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	88 e6       	ldi	r24, 0x68	; 104
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
			set_curnt_pos();
    1472:	0e 94 f7 05 	call	0xbee	; 0xbee <_Z13set_curnt_posv>
			MAX7219_clear_8X8();
    1476:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
			update_Disp();			//Set positions on display and update
    147a:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
    147e:	2f ef       	ldi	r18, 0xFF	; 255
    1480:	84 e3       	ldi	r24, 0x34	; 52
    1482:	9c e0       	ldi	r25, 0x0C	; 12
    1484:	21 50       	subi	r18, 0x01	; 1
    1486:	80 40       	sbci	r24, 0x00	; 0
    1488:	90 40       	sbci	r25, 0x00	; 0
    148a:	e1 f7       	brne	.-8      	; 0x1484 <_Z7playerDi+0x4c>
    148c:	00 c0       	rjmp	.+0      	; 0x148e <_Z7playerDi+0x56>
    148e:	00 00       	nop
    1490:	6f c0       	rjmp	.+222    	; 0x1570 <_Z7playerDi+0x138>
			_delay_ms(500);
		}
	}
	else if (remaining_distance_p4 >= Random_number)
    1492:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <remaining_distance_p4>
    1496:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <remaining_distance_p4+0x1>
    149a:	20 17       	cp	r18, r16
    149c:	31 07       	cpc	r19, r17
    149e:	0c f4       	brge	.+2      	; 0x14a2 <_Z7playerDi+0x6a>
    14a0:	61 c0       	rjmp	.+194    	; 0x1564 <_Z7playerDi+0x12c>
	{
		for (int i=0; i<Random_number; i++)
    14a2:	10 16       	cp	r1, r16
    14a4:	11 06       	cpc	r1, r17
    14a6:	0c f0       	brlt	.+2      	; 0x14aa <_Z7playerDi+0x72>
    14a8:	5d c0       	rjmp	.+186    	; 0x1564 <_Z7playerDi+0x12c>
    14aa:	c0 e0       	ldi	r28, 0x00	; 0
    14ac:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if (previous_Pos == 28)
			{
				curnt_Pos_playerD = 1;
    14ae:	ee 24       	eor	r14, r14
    14b0:	e3 94       	inc	r14
    14b2:	f1 2c       	mov	r15, r1
	}
	else if (remaining_distance_p4 >= Random_number)
	{
		for (int i=0; i<Random_number; i++)
		{
			if (previous_Pos == 28)
    14b4:	8c 31       	cpi	r24, 0x1C	; 28
    14b6:	91 05       	cpc	r25, r1
    14b8:	31 f5       	brne	.+76     	; 0x1506 <_Z7playerDi+0xce>
			{
				curnt_Pos_playerD = 1;
    14ba:	f0 92 0c 02 	sts	0x020C, r15	; 0x80020c <curnt_Pos_playerD+0x1>
    14be:	e0 92 0b 02 	sts	0x020B, r14	; 0x80020b <curnt_Pos_playerD>
				remaining_distance_p4--;
    14c2:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <remaining_distance_p4>
    14c6:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <remaining_distance_p4+0x1>
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <remaining_distance_p4+0x1>
    14d0:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <remaining_distance_p4>
				set_Path(previous_Pos, false);
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	8c e1       	ldi	r24, 0x1C	; 28
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
				set_curnt_pos();
    14de:	0e 94 f7 05 	call	0xbee	; 0xbee <_Z13set_curnt_posv>
				MAX7219_clear_8X8();
    14e2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
				update_Disp();							//Move point and update display
    14e6:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
    14ea:	2f ef       	ldi	r18, 0xFF	; 255
    14ec:	84 e3       	ldi	r24, 0x34	; 52
    14ee:	9c e0       	ldi	r25, 0x0C	; 12
    14f0:	21 50       	subi	r18, 0x01	; 1
    14f2:	80 40       	sbci	r24, 0x00	; 0
    14f4:	90 40       	sbci	r25, 0x00	; 0
    14f6:	e1 f7       	brne	.-8      	; 0x14f0 <_Z7playerDi+0xb8>
    14f8:	00 c0       	rjmp	.+0      	; 0x14fa <_Z7playerDi+0xc2>
    14fa:	00 00       	nop
				_delay_ms(500);
				previous_Pos = curnt_Pos_playerD;
    14fc:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <curnt_Pos_playerD>
    1500:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <curnt_Pos_playerD+0x1>
    1504:	2a c0       	rjmp	.+84     	; 0x155a <_Z7playerDi+0x122>
			}
			else
			{
				curnt_Pos_playerD++;
    1506:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <curnt_Pos_playerD>
    150a:	30 91 0c 02 	lds	r19, 0x020C	; 0x80020c <curnt_Pos_playerD+0x1>
    150e:	2f 5f       	subi	r18, 0xFF	; 255
    1510:	3f 4f       	sbci	r19, 0xFF	; 255
    1512:	30 93 0c 02 	sts	0x020C, r19	; 0x80020c <curnt_Pos_playerD+0x1>
    1516:	20 93 0b 02 	sts	0x020B, r18	; 0x80020b <curnt_Pos_playerD>
				remaining_distance_p4--;
    151a:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <remaining_distance_p4>
    151e:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <remaining_distance_p4+0x1>
    1522:	21 50       	subi	r18, 0x01	; 1
    1524:	31 09       	sbc	r19, r1
    1526:	30 93 02 02 	sts	0x0202, r19	; 0x800202 <remaining_distance_p4+0x1>
    152a:	20 93 01 02 	sts	0x0201, r18	; 0x800201 <remaining_distance_p4>
				set_Path(previous_Pos, false);
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
				set_curnt_pos();
    1534:	0e 94 f7 05 	call	0xbee	; 0xbee <_Z13set_curnt_posv>
				MAX7219_clear_8X8();
    1538:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
				update_Disp();							//Move point and update display
    153c:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
    1540:	2f ef       	ldi	r18, 0xFF	; 255
    1542:	84 e3       	ldi	r24, 0x34	; 52
    1544:	9c e0       	ldi	r25, 0x0C	; 12
    1546:	21 50       	subi	r18, 0x01	; 1
    1548:	80 40       	sbci	r24, 0x00	; 0
    154a:	90 40       	sbci	r25, 0x00	; 0
    154c:	e1 f7       	brne	.-8      	; 0x1546 <_Z7playerDi+0x10e>
    154e:	00 c0       	rjmp	.+0      	; 0x1550 <_Z7playerDi+0x118>
    1550:	00 00       	nop
				_delay_ms(500);
				previous_Pos = curnt_Pos_playerD;
    1552:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <curnt_Pos_playerD>
    1556:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <curnt_Pos_playerD+0x1>
			_delay_ms(500);
		}
	}
	else if (remaining_distance_p4 >= Random_number)
	{
		for (int i=0; i<Random_number; i++)
    155a:	21 96       	adiw	r28, 0x01	; 1
    155c:	0c 17       	cp	r16, r28
    155e:	1d 07       	cpc	r17, r29
    1560:	09 f0       	breq	.+2      	; 0x1564 <_Z7playerDi+0x12c>
    1562:	a8 cf       	rjmp	.-176    	; 0x14b4 <_Z7playerDi+0x7c>
			}
		}
	}
	
	/*If random number is not equal to 1 or 6 chance goes to next player*/
	if (!(Random_number == 6))
    1564:	06 30       	cpi	r16, 0x06	; 6
    1566:	11 05       	cpc	r17, r1
    1568:	19 f0       	breq	.+6      	; 0x1570 <_Z7playerDi+0x138>
	{
		chance = 'A';
    156a:	81 e4       	ldi	r24, 0x41	; 65
    156c:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <chance>
	}
	
	/*If remainig distance is 0, then the game is over*/
	if (remaining_distance_p4 == 0)
    1570:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <remaining_distance_p4>
    1574:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <remaining_distance_p4+0x1>
    1578:	89 2b       	or	r24, r25
    157a:	71 f4       	brne	.+28     	; 0x1598 <_Z7playerDi+0x160>
	{
		chance = '0';
    157c:	80 e3       	ldi	r24, 0x30	; 48
    157e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <chance>
		no_players = -1;
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	9f ef       	ldi	r25, 0xFF	; 255
    1586:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <no_players+0x1>
    158a:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <no_players>
		onGame = false;
    158e:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <onGame>
		winner = 'D';
    1592:	84 e4       	ldi	r24, 0x44	; 68
    1594:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <winner>
	
	
	/* If oponant player is on the current position of the player and not in a safe position, oponant player returns to his yard*/
	
	
	if (!(check_Safe(curnt_Pos_playerD)))
    1598:	c0 91 0b 02 	lds	r28, 0x020B	; 0x80020b <curnt_Pos_playerD>
    159c:	d0 91 0c 02 	lds	r29, 0x020C	; 0x80020c <curnt_Pos_playerD+0x1>
    15a0:	ce 01       	movw	r24, r28
    15a2:	0e 94 00 04 	call	0x800	; 0x800 <_Z10check_Safei>
    15a6:	81 11       	cpse	r24, r1
    15a8:	2e c0       	rjmp	.+92     	; 0x1606 <_Z7playerDi+0x1ce>
	{
		//Checking for player A
		check(curnt_Pos_playerD,curnt_Pos_playerA,remaining_distance_p1,init_A,'D');
    15aa:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <remaining_distance_p1>
    15ae:	50 91 08 02 	lds	r21, 0x0208	; 0x800208 <remaining_distance_p1+0x1>
    15b2:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <curnt_Pos_playerA>
    15b6:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <curnt_Pos_playerA+0x1>
    15ba:	04 e4       	ldi	r16, 0x44	; 68
    15bc:	25 e6       	ldi	r18, 0x65	; 101
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	ce 01       	movw	r24, r28
    15c2:	0e 94 14 06 	call	0xc28	; 0xc28 <_Z5checkiiiic>
		
		//Checking for player B
		check(curnt_Pos_playerD,curnt_Pos_playerB,remaining_distance_p2,init_B,'D');
    15c6:	40 91 05 02 	lds	r20, 0x0205	; 0x800205 <remaining_distance_p2>
    15ca:	50 91 06 02 	lds	r21, 0x0206	; 0x800206 <remaining_distance_p2+0x1>
    15ce:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <curnt_Pos_playerB>
    15d2:	70 91 10 02 	lds	r23, 0x0210	; 0x800210 <curnt_Pos_playerB+0x1>
    15d6:	26 e6       	ldi	r18, 0x66	; 102
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <curnt_Pos_playerD>
    15de:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <curnt_Pos_playerD+0x1>
    15e2:	0e 94 14 06 	call	0xc28	; 0xc28 <_Z5checkiiiic>
		
		//Checking for player C
		check(curnt_Pos_playerD,curnt_Pos_playerC,remaining_distance_p3,init_C,'D');
    15e6:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <remaining_distance_p3>
    15ea:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <remaining_distance_p3+0x1>
    15ee:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <curnt_Pos_playerC>
    15f2:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <curnt_Pos_playerC+0x1>
    15f6:	27 e6       	ldi	r18, 0x67	; 103
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <curnt_Pos_playerD>
    15fe:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <curnt_Pos_playerD+0x1>
    1602:	0e 94 14 06 	call	0xc28	; 0xc28 <_Z5checkiiiic>
	}
}
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	ff 90       	pop	r15
    1610:	ef 90       	pop	r14
    1612:	08 95       	ret

00001614 <main>:



int main(void)
{
	USART_INIT();		//Initialize USART communication
    1614:	0e 94 4a 01 	call	0x294	; 0x294 <_Z10USART_INITv>
	
	DDRC = 0x00;		//Set port C as input
    1618:	17 b8       	out	0x07, r1	; 7
	
	DDRD &= ~(1<<DDD3); // Set D3 pin of port D as Input for interrupt (for reset pin)
    161a:	53 98       	cbi	0x0a, 3	; 10
	EICRA |= (1<<ISC10)|(1<<ISC11); // Set INT1 trigger on rising edge
    161c:	e9 e6       	ldi	r30, 0x69	; 105
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	8c 60       	ori	r24, 0x0C	; 12
    1624:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1); //Enable INT1
    1626:	e9 9a       	sbi	0x1d, 1	; 29
	
	
	sei();		//Enable global interrupt
    1628:	78 94       	sei
	
	MAX7219_init_8X8();				//Initialize Display
    162a:	0e 94 89 00 	call	0x112	; 0x112 <_Z16MAX7219_init_8X8v>
	MAX7219_set_intensity_8X8(15);	//Brightness of the display			
    162e:	8f e0       	ldi	r24, 0x0F	; 15
    1630:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_Z25MAX7219_set_intensity_8X8h>
	
	MAX7219_init_7SEG();				//Initialize seven segment display
    1634:	0e 94 08 01 	call	0x210	; 0x210 <_Z17MAX7219_init_7SEGv>
	MAX7219_set_intensity_7SEG(15);		//Brightness of seven segment display
    1638:	8f e0       	ldi	r24, 0x0F	; 15
    163a:	0e 94 2b 01 	call	0x256	; 0x256 <_Z26MAX7219_set_intensity_7SEGh>
				chance = 'A';
				onGame = true;
			}
			else if (!(PINC & (1<<PINC3)))
			{
				no_players = 4;
    163e:	68 94       	set
    1640:	88 24       	eor	r8, r8
    1642:	82 f8       	bld	r8, 2
    1644:	91 2c       	mov	r9, r1
				#define Player_02 (1<<PINC2)
			
				while (chance == 'A')		//When the chance is to player 01
				{
					MAX7219_clear_8X8();
					Disp_Array[0][7] = 1;
    1646:	00 e8       	ldi	r16, 0x80	; 128
    1648:	11 e0       	ldi	r17, 0x01	; 1
    164a:	c1 e0       	ldi	r28, 0x01	; 1
    164c:	d0 e0       	ldi	r29, 0x00	; 0
				}
			
				while (chance == 'C')		//when chance is to player 02
				{
					MAX7219_clear_8X8();
					Disp_Array[7][0] = 1;
    164e:	0f 2e       	mov	r0, r31
    1650:	f0 ef       	ldi	r31, 0xF0	; 240
    1652:	ef 2e       	mov	r14, r31
    1654:	f1 e0       	ldi	r31, 0x01	; 1
    1656:	ff 2e       	mov	r15, r31
    1658:	f0 2d       	mov	r31, r0
	MAX7219_init_7SEG();				//Initialize seven segment display
	MAX7219_set_intensity_7SEG(15);		//Brightness of seven segment display
	
	while (1)
	{		
		Disp_name();			//Display name LUDO
    165a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_Z9Disp_namev>
		no_players = 0;
    165e:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <no_players+0x1>
    1662:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <no_players>
				set_Path(102,true);
				curnt_Pos_playerA = init_A;
				curnt_Pos_playerB = init_B;
				curnt_Pos_playerC = init_C;
				curnt_Pos_playerD = init_D;
				chance = 'A';
    1666:	0f 2e       	mov	r0, r31
    1668:	f1 e4       	ldi	r31, 0x41	; 65
    166a:	bf 2e       	mov	r11, r31
    166c:	f0 2d       	mov	r31, r0
		while (no_players == 0) 
		{
			Display_number();
			if (!(PINC & (1<<PINC1)))
			{
				no_players = 2;
    166e:	68 94       	set
    1670:	cc 24       	eor	r12, r12
    1672:	c1 f8       	bld	r12, 1
    1674:	d1 2c       	mov	r13, r1
    1676:	07 c0       	rjmp	.+14     	; 0x1686 <main+0x72>
	
		/*Select no of players that playing
		if player 2 button is pressed 2 players can play the game
		if player 4 button is pressed 4 players can play the game */
	
		while (no_players == 0) 
    1678:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <no_players>
    167c:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <no_players+0x1>
    1680:	89 2b       	or	r24, r25
    1682:	09 f0       	breq	.+2      	; 0x1686 <main+0x72>
    1684:	60 c0       	rjmp	.+192    	; 0x1746 <main+0x132>
		{
			Display_number();
    1686:	0e 94 91 01 	call	0x322	; 0x322 <_Z14Display_numberv>
			if (!(PINC & (1<<PINC1)))
    168a:	31 99       	sbic	0x06, 1	; 6
    168c:	22 c0       	rjmp	.+68     	; 0x16d2 <main+0xbe>
			{
				no_players = 2;
    168e:	d0 92 16 02 	sts	0x0216, r13	; 0x800216 <no_players+0x1>
    1692:	c0 92 15 02 	sts	0x0215, r12	; 0x800215 <no_players>
				MAX7219_clear_8X8();		//Clear matrix display
    1696:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
				set_Path(101,true);
    169a:	61 e0       	ldi	r22, 0x01	; 1
    169c:	85 e6       	ldi	r24, 0x65	; 101
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
				set_Path(103, true);
    16a4:	61 e0       	ldi	r22, 0x01	; 1
    16a6:	87 e6       	ldi	r24, 0x67	; 103
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
				curnt_Pos_playerA = init_A;
    16ae:	85 e6       	ldi	r24, 0x65	; 101
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <curnt_Pos_playerA+0x1>
    16b6:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <curnt_Pos_playerA>
				curnt_Pos_playerC = init_C;
    16ba:	87 e6       	ldi	r24, 0x67	; 103
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <curnt_Pos_playerC+0x1>
    16c2:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <curnt_Pos_playerC>
				chance = 'A';
    16c6:	b0 92 14 02 	sts	0x0214, r11	; 0x800214 <chance>
				onGame = true;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <onGame>
    16d0:	d3 cf       	rjmp	.-90     	; 0x1678 <main+0x64>
			}
			else if (!(PINC & (1<<PINC3)))
    16d2:	33 99       	sbic	0x06, 3	; 6
    16d4:	d1 cf       	rjmp	.-94     	; 0x1678 <main+0x64>
			{
				no_players = 4;
    16d6:	90 92 16 02 	sts	0x0216, r9	; 0x800216 <no_players+0x1>
    16da:	80 92 15 02 	sts	0x0215, r8	; 0x800215 <no_players>
				MAX7219_clear_8X8();		//Clear matrix display
    16de:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
				set_Path(101,true);
    16e2:	61 e0       	ldi	r22, 0x01	; 1
    16e4:	85 e6       	ldi	r24, 0x65	; 101
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
				set_Path(103,true);
    16ec:	61 e0       	ldi	r22, 0x01	; 1
    16ee:	87 e6       	ldi	r24, 0x67	; 103
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
				set_Path(104,true);
    16f6:	61 e0       	ldi	r22, 0x01	; 1
    16f8:	88 e6       	ldi	r24, 0x68	; 104
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
				set_Path(102,true);
    1700:	61 e0       	ldi	r22, 0x01	; 1
    1702:	86 e6       	ldi	r24, 0x66	; 102
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 bc 01 	call	0x378	; 0x378 <_Z8set_Pathib>
				curnt_Pos_playerA = init_A;
    170a:	85 e6       	ldi	r24, 0x65	; 101
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <curnt_Pos_playerA+0x1>
    1712:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <curnt_Pos_playerA>
				curnt_Pos_playerB = init_B;
    1716:	86 e6       	ldi	r24, 0x66	; 102
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <curnt_Pos_playerB+0x1>
    171e:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <curnt_Pos_playerB>
				curnt_Pos_playerC = init_C;
    1722:	87 e6       	ldi	r24, 0x67	; 103
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <curnt_Pos_playerC+0x1>
    172a:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <curnt_Pos_playerC>
				curnt_Pos_playerD = init_D;
    172e:	88 e6       	ldi	r24, 0x68	; 104
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <curnt_Pos_playerD+0x1>
    1736:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <curnt_Pos_playerD>
				chance = 'A';
    173a:	b0 92 14 02 	sts	0x0214, r11	; 0x800214 <chance>
				onGame = true;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <onGame>
    1744:	99 cf       	rjmp	.-206    	; 0x1678 <main+0x64>
				
				
				while (chance == 'B')		//When the chance is to player 02
				{
					MAX7219_clear_8X8();
					Disp_Array[7][7] = 1;
    1746:	0f 2e       	mov	r0, r31
    1748:	fe ef       	ldi	r31, 0xFE	; 254
    174a:	cf 2e       	mov	r12, r31
    174c:	f1 e0       	ldi	r31, 0x01	; 1
    174e:	df 2e       	mov	r13, r31
    1750:	f0 2d       	mov	r31, r0
			}
		}
	
	
	
		while (onGame) 
    1752:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <onGame>
    1756:	81 11       	cpse	r24, r1
    1758:	08 c0       	rjmp	.+16     	; 0x176a <main+0x156>
			}
		}
		
		
		//When game is over
		while (no_players == -1)
    175a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <no_players>
    175e:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <no_players+0x1>
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	09 f4       	brne	.+2      	; 0x1768 <main+0x154>
    1766:	55 c1       	rjmp	.+682    	; 0x1a12 <main+0x3fe>
    1768:	78 cf       	rjmp	.-272    	; 0x165a <main+0x46>
	
	
	
		while (onGame) 
		{
			Animation();	//Dispplay simple Animation
    176a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <_Z9Animationv>
			
			//Count Down
			Disp_03();
    176e:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z7Disp_03v>
    1772:	8f ef       	ldi	r24, 0xFF	; 255
    1774:	99 e6       	ldi	r25, 0x69	; 105
    1776:	e8 e1       	ldi	r30, 0x18	; 24
    1778:	81 50       	subi	r24, 0x01	; 1
    177a:	90 40       	sbci	r25, 0x00	; 0
    177c:	e0 40       	sbci	r30, 0x00	; 0
    177e:	e1 f7       	brne	.-8      	; 0x1778 <main+0x164>
    1780:	00 c0       	rjmp	.+0      	; 0x1782 <main+0x16e>
    1782:	00 00       	nop
			_delay_ms(1000);
			Disp_02();
    1784:	0e 94 16 05 	call	0xa2c	; 0xa2c <_Z7Disp_02v>
    1788:	ff ef       	ldi	r31, 0xFF	; 255
    178a:	29 e6       	ldi	r18, 0x69	; 105
    178c:	88 e1       	ldi	r24, 0x18	; 24
    178e:	f1 50       	subi	r31, 0x01	; 1
    1790:	20 40       	sbci	r18, 0x00	; 0
    1792:	80 40       	sbci	r24, 0x00	; 0
    1794:	e1 f7       	brne	.-8      	; 0x178e <main+0x17a>
    1796:	00 c0       	rjmp	.+0      	; 0x1798 <main+0x184>
    1798:	00 00       	nop
			_delay_ms(1000);
			Disp_01();
    179a:	0e 94 07 05 	call	0xa0e	; 0xa0e <_Z7Disp_01v>
    179e:	9f ef       	ldi	r25, 0xFF	; 255
    17a0:	e9 e6       	ldi	r30, 0x69	; 105
    17a2:	f8 e1       	ldi	r31, 0x18	; 24
    17a4:	91 50       	subi	r25, 0x01	; 1
    17a6:	e0 40       	sbci	r30, 0x00	; 0
    17a8:	f0 40       	sbci	r31, 0x00	; 0
    17aa:	e1 f7       	brne	.-8      	; 0x17a4 <main+0x190>
    17ac:	00 c0       	rjmp	.+0      	; 0x17ae <main+0x19a>
    17ae:	00 00       	nop
			_delay_ms(1000);
			
			while (no_players == 2)
    17b0:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <no_players>
    17b4:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <no_players+0x1>
    17b8:	02 97       	sbiw	r24, 0x02	; 2
    17ba:	09 f0       	breq	.+2      	; 0x17be <main+0x1aa>
    17bc:	61 c0       	rjmp	.+194    	; 0x1880 <main+0x26c>
			{
				update_Disp();
    17be:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
				#define Player_01 (1<<PINC0) 
				#define Player_02 (1<<PINC2)
			
				while (chance == 'A')		//When the chance is to player 01
    17c2:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <chance>
    17c6:	81 34       	cpi	r24, 0x41	; 65
    17c8:	29 f0       	breq	.+10     	; 0x17d4 <main+0x1c0>
					}
					Disp_Array[0][7] = 0;
					MAX7219_clear_8X8();
				}
			
				while (chance == 'C')		//when chance is to player 02
    17ca:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <chance>
    17ce:	83 34       	cpi	r24, 0x43	; 67
    17d0:	79 f7       	brne	.-34     	; 0x17b0 <main+0x19c>
    17d2:	2b c0       	rjmp	.+86     	; 0x182a <main+0x216>
				#define Player_01 (1<<PINC0) 
				#define Player_02 (1<<PINC2)
			
				while (chance == 'A')		//When the chance is to player 01
				{
					MAX7219_clear_8X8();
    17d4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
					Disp_Array[0][7] = 1;
    17d8:	f8 01       	movw	r30, r16
    17da:	d7 87       	std	Z+15, r29	; 0x0f
    17dc:	c6 87       	std	Z+14, r28	; 0x0e
					update_Disp();
    17de:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
					if (!(PINC & Player_01))
    17e2:	30 99       	sbic	0x06, 0	; 6
    17e4:	18 c0       	rjmp	.+48     	; 0x1816 <main+0x202>
					{
						USART_Transmit('L');			//Send "L" to RNG MCU to receive random number
    17e6:	8c e4       	ldi	r24, 0x4C	; 76
    17e8:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z14USART_Transmith>
						RND_number = USART_Receive();	//Set RND number to number received by RNG MCU
    17ec:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_Z13USART_Receivev>
    17f0:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
						disp_seg(RND_number);
    17f4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z8disp_segc>
    17f8:	ff ef       	ldi	r31, 0xFF	; 255
    17fa:	29 e6       	ldi	r18, 0x69	; 105
    17fc:	88 e1       	ldi	r24, 0x18	; 24
    17fe:	f1 50       	subi	r31, 0x01	; 1
    1800:	20 40       	sbci	r18, 0x00	; 0
    1802:	80 40       	sbci	r24, 0x00	; 0
    1804:	e1 f7       	brne	.-8      	; 0x17fe <main+0x1ea>
    1806:	00 c0       	rjmp	.+0      	; 0x1808 <main+0x1f4>
    1808:	00 00       	nop
						_delay_ms(1000);
						MAX7219_clear_7SEG();
    180a:	0e 94 32 01 	call	0x264	; 0x264 <_Z18MAX7219_clear_7SEGv>
						playerA(set_number());
    180e:	0e 94 15 07 	call	0xe2a	; 0xe2a <_Z10set_numberv>
    1812:	0e 94 38 07 	call	0xe70	; 0xe70 <_Z7playerAi>
					}
					Disp_Array[0][7] = 0;
    1816:	f8 01       	movw	r30, r16
    1818:	17 86       	std	Z+15, r1	; 0x0f
    181a:	16 86       	std	Z+14, r1	; 0x0e
					MAX7219_clear_8X8();
    181c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
			{
				update_Disp();
				#define Player_01 (1<<PINC0) 
				#define Player_02 (1<<PINC2)
			
				while (chance == 'A')		//When the chance is to player 01
    1820:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <chance>
    1824:	81 34       	cpi	r24, 0x41	; 65
    1826:	b1 f2       	breq	.-84     	; 0x17d4 <main+0x1c0>
    1828:	d0 cf       	rjmp	.-96     	; 0x17ca <main+0x1b6>
					MAX7219_clear_8X8();
				}
			
				while (chance == 'C')		//when chance is to player 02
				{
					MAX7219_clear_8X8();
    182a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
					Disp_Array[7][0] = 1;
    182e:	f7 01       	movw	r30, r14
    1830:	d1 83       	std	Z+1, r29	; 0x01
    1832:	c0 83       	st	Z, r28
					update_Disp();
    1834:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
					if (!(PINC & Player_02))
    1838:	32 99       	sbic	0x06, 2	; 6
    183a:	18 c0       	rjmp	.+48     	; 0x186c <main+0x258>
					{
						USART_Transmit('L');			//Send "L" to RNG MCU to receive random number
    183c:	8c e4       	ldi	r24, 0x4C	; 76
    183e:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z14USART_Transmith>
						RND_number = USART_Receive();	//Set RND number to number received by RNG MCU
    1842:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_Z13USART_Receivev>
    1846:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
						disp_seg(RND_number);
    184a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z8disp_segc>
    184e:	ff ef       	ldi	r31, 0xFF	; 255
    1850:	29 e6       	ldi	r18, 0x69	; 105
    1852:	88 e1       	ldi	r24, 0x18	; 24
    1854:	f1 50       	subi	r31, 0x01	; 1
    1856:	20 40       	sbci	r18, 0x00	; 0
    1858:	80 40       	sbci	r24, 0x00	; 0
    185a:	e1 f7       	brne	.-8      	; 0x1854 <main+0x240>
    185c:	00 c0       	rjmp	.+0      	; 0x185e <main+0x24a>
    185e:	00 00       	nop
						_delay_ms(1000);
						MAX7219_clear_7SEG();
    1860:	0e 94 32 01 	call	0x264	; 0x264 <_Z18MAX7219_clear_7SEGv>
						playerC(set_number());
    1864:	0e 94 15 07 	call	0xe2a	; 0xe2a <_Z10set_numberv>
    1868:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z7playerCi>
					}
					Disp_Array[7][0] = 0;
    186c:	f7 01       	movw	r30, r14
    186e:	11 82       	std	Z+1, r1	; 0x01
    1870:	10 82       	st	Z, r1
					MAX7219_clear_8X8();
    1872:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
					}
					Disp_Array[0][7] = 0;
					MAX7219_clear_8X8();
				}
			
				while (chance == 'C')		//when chance is to player 02
    1876:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <chance>
    187a:	83 34       	cpi	r24, 0x43	; 67
    187c:	b1 f2       	breq	.-84     	; 0x182a <main+0x216>
    187e:	98 cf       	rjmp	.-208    	; 0x17b0 <main+0x19c>
					}
					Disp_Array[7][0] = 0;
					MAX7219_clear_8X8();
				}
			}
			while (no_players == 4)
    1880:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <no_players>
    1884:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <no_players+0x1>
    1888:	04 97       	sbiw	r24, 0x04	; 4
    188a:	09 f0       	breq	.+2      	; 0x188e <main+0x27a>
    188c:	62 cf       	rjmp	.-316    	; 0x1752 <main+0x13e>
			{
				update_Disp();
    188e:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
				#define Player_01 (1<<PINC0)
				#define Player_02 (1<<PINC1)
				#define Player_03 (1<<PINC2)
				#define Player_04 (1<<PINC3)
				
				while (chance == 'A')		//When the chance is to player 01
    1892:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <chance>
    1896:	81 34       	cpi	r24, 0x41	; 65
    1898:	29 f0       	breq	.+10     	; 0x18a4 <main+0x290>
					MAX7219_clear_8X8();
				}
				
				
				
				while (chance == 'B')		//When the chance is to player 02
    189a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <chance>
    189e:	82 34       	cpi	r24, 0x42	; 66
    18a0:	61 f5       	brne	.+88     	; 0x18fa <main+0x2e6>
    18a2:	30 c0       	rjmp	.+96     	; 0x1904 <main+0x2f0>
				#define Player_03 (1<<PINC2)
				#define Player_04 (1<<PINC3)
				
				while (chance == 'A')		//When the chance is to player 01
				{
					MAX7219_clear_8X8();
    18a4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
					Disp_Array[0][7] = 1;
    18a8:	f8 01       	movw	r30, r16
    18aa:	d7 87       	std	Z+15, r29	; 0x0f
    18ac:	c6 87       	std	Z+14, r28	; 0x0e
					update_Disp();
    18ae:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
					if (!(PINC & Player_01))
    18b2:	30 99       	sbic	0x06, 0	; 6
    18b4:	18 c0       	rjmp	.+48     	; 0x18e6 <main+0x2d2>
					{
						USART_Transmit('L');			//Send "L" to RNG MCU to receive random number
    18b6:	8c e4       	ldi	r24, 0x4C	; 76
    18b8:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z14USART_Transmith>
						RND_number = USART_Receive();	//Set RND number to number received by RNG MCU
    18bc:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_Z13USART_Receivev>
    18c0:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
						disp_seg(RND_number);
    18c4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z8disp_segc>
    18c8:	ff ef       	ldi	r31, 0xFF	; 255
    18ca:	29 e6       	ldi	r18, 0x69	; 105
    18cc:	88 e1       	ldi	r24, 0x18	; 24
    18ce:	f1 50       	subi	r31, 0x01	; 1
    18d0:	20 40       	sbci	r18, 0x00	; 0
    18d2:	80 40       	sbci	r24, 0x00	; 0
    18d4:	e1 f7       	brne	.-8      	; 0x18ce <main+0x2ba>
    18d6:	00 c0       	rjmp	.+0      	; 0x18d8 <main+0x2c4>
    18d8:	00 00       	nop
						_delay_ms(1000);
						MAX7219_clear_7SEG();
    18da:	0e 94 32 01 	call	0x264	; 0x264 <_Z18MAX7219_clear_7SEGv>
						playerA(set_number());
    18de:	0e 94 15 07 	call	0xe2a	; 0xe2a <_Z10set_numberv>
    18e2:	0e 94 38 07 	call	0xe70	; 0xe70 <_Z7playerAi>
					}
					Disp_Array[0][7] = 0;
    18e6:	f8 01       	movw	r30, r16
    18e8:	17 86       	std	Z+15, r1	; 0x0f
    18ea:	16 86       	std	Z+14, r1	; 0x0e
					MAX7219_clear_8X8();
    18ec:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
				#define Player_01 (1<<PINC0)
				#define Player_02 (1<<PINC1)
				#define Player_03 (1<<PINC2)
				#define Player_04 (1<<PINC3)
				
				while (chance == 'A')		//When the chance is to player 01
    18f0:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <chance>
    18f4:	81 34       	cpi	r24, 0x41	; 65
    18f6:	b1 f2       	breq	.-84     	; 0x18a4 <main+0x290>
    18f8:	d0 cf       	rjmp	.-96     	; 0x189a <main+0x286>
					Disp_Array[7][7] = 0;
					MAX7219_clear_8X8();
				}
				
				
				while (chance == 'C')		//When the chance is to player 03
    18fa:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <chance>
    18fe:	83 34       	cpi	r24, 0x43	; 67
    1900:	61 f5       	brne	.+88     	; 0x195a <main+0x346>
    1902:	31 c0       	rjmp	.+98     	; 0x1966 <main+0x352>
				
				
				
				while (chance == 'B')		//When the chance is to player 02
				{
					MAX7219_clear_8X8();
    1904:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
					Disp_Array[7][7] = 1;
    1908:	f6 01       	movw	r30, r12
    190a:	d1 83       	std	Z+1, r29	; 0x01
    190c:	c0 83       	st	Z, r28
					update_Disp();
    190e:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
					if (!(PINC & Player_02))
    1912:	31 99       	sbic	0x06, 1	; 6
    1914:	18 c0       	rjmp	.+48     	; 0x1946 <main+0x332>
					{
						USART_Transmit('L');			//Send "L" to RNG MCU to receive random number
    1916:	8c e4       	ldi	r24, 0x4C	; 76
    1918:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z14USART_Transmith>
						RND_number = USART_Receive();	//Set RND number to number received by RNG MCU
    191c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_Z13USART_Receivev>
    1920:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
						disp_seg(RND_number);
    1924:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z8disp_segc>
    1928:	ff ef       	ldi	r31, 0xFF	; 255
    192a:	29 e6       	ldi	r18, 0x69	; 105
    192c:	88 e1       	ldi	r24, 0x18	; 24
    192e:	f1 50       	subi	r31, 0x01	; 1
    1930:	20 40       	sbci	r18, 0x00	; 0
    1932:	80 40       	sbci	r24, 0x00	; 0
    1934:	e1 f7       	brne	.-8      	; 0x192e <main+0x31a>
    1936:	00 c0       	rjmp	.+0      	; 0x1938 <main+0x324>
    1938:	00 00       	nop
						_delay_ms(1000);
						MAX7219_clear_7SEG();
    193a:	0e 94 32 01 	call	0x264	; 0x264 <_Z18MAX7219_clear_7SEGv>
						playerB(set_number());
    193e:	0e 94 15 07 	call	0xe2a	; 0xe2a <_Z10set_numberv>
    1942:	0e 94 33 08 	call	0x1066	; 0x1066 <_Z7playerBi>
					}
					Disp_Array[7][7] = 0;
    1946:	f6 01       	movw	r30, r12
    1948:	11 82       	std	Z+1, r1	; 0x01
    194a:	10 82       	st	Z, r1
					MAX7219_clear_8X8();
    194c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
					MAX7219_clear_8X8();
				}
				
				
				
				while (chance == 'B')		//When the chance is to player 02
    1950:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <chance>
    1954:	82 34       	cpi	r24, 0x42	; 66
    1956:	b1 f2       	breq	.-84     	; 0x1904 <main+0x2f0>
    1958:	d0 cf       	rjmp	.-96     	; 0x18fa <main+0x2e6>
					Disp_Array[7][0] = 0;
					MAX7219_clear_8X8();
				}
				
				
				while (chance == 'D')		//When the chance is to player 04
    195a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <chance>
    195e:	84 34       	cpi	r24, 0x44	; 68
    1960:	09 f0       	breq	.+2      	; 0x1964 <main+0x350>
    1962:	8e cf       	rjmp	.-228    	; 0x1880 <main+0x26c>
    1964:	2b c0       	rjmp	.+86     	; 0x19bc <main+0x3a8>
				}
				
				
				while (chance == 'C')		//When the chance is to player 03
				{
					MAX7219_clear_8X8();
    1966:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
					Disp_Array[7][0] = 1;
    196a:	f7 01       	movw	r30, r14
    196c:	d1 83       	std	Z+1, r29	; 0x01
    196e:	c0 83       	st	Z, r28
					update_Disp();
    1970:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
					if (!(PINC & Player_03))
    1974:	32 99       	sbic	0x06, 2	; 6
    1976:	18 c0       	rjmp	.+48     	; 0x19a8 <main+0x394>
					{
						USART_Transmit('L');			//Send "L" to RNG MCU to receive random number
    1978:	8c e4       	ldi	r24, 0x4C	; 76
    197a:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z14USART_Transmith>
						RND_number = USART_Receive();	//Set RND number to number received by RNG MCU
    197e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_Z13USART_Receivev>
    1982:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
						disp_seg(RND_number);
    1986:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z8disp_segc>
    198a:	ff ef       	ldi	r31, 0xFF	; 255
    198c:	29 e6       	ldi	r18, 0x69	; 105
    198e:	88 e1       	ldi	r24, 0x18	; 24
    1990:	f1 50       	subi	r31, 0x01	; 1
    1992:	20 40       	sbci	r18, 0x00	; 0
    1994:	80 40       	sbci	r24, 0x00	; 0
    1996:	e1 f7       	brne	.-8      	; 0x1990 <main+0x37c>
    1998:	00 c0       	rjmp	.+0      	; 0x199a <main+0x386>
    199a:	00 00       	nop
						_delay_ms(1000);
						MAX7219_clear_7SEG();
    199c:	0e 94 32 01 	call	0x264	; 0x264 <_Z18MAX7219_clear_7SEGv>
						playerC(set_number());
    19a0:	0e 94 15 07 	call	0xe2a	; 0xe2a <_Z10set_numberv>
    19a4:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z7playerCi>
					}
					Disp_Array[7][0] = 0;
    19a8:	f7 01       	movw	r30, r14
    19aa:	11 82       	std	Z+1, r1	; 0x01
    19ac:	10 82       	st	Z, r1
					MAX7219_clear_8X8();
    19ae:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
					Disp_Array[7][7] = 0;
					MAX7219_clear_8X8();
				}
				
				
				while (chance == 'C')		//When the chance is to player 03
    19b2:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <chance>
    19b6:	83 34       	cpi	r24, 0x43	; 67
    19b8:	b1 f2       	breq	.-84     	; 0x1966 <main+0x352>
    19ba:	cf cf       	rjmp	.-98     	; 0x195a <main+0x346>
				}
				
				
				while (chance == 'D')		//When the chance is to player 04
				{
					MAX7219_clear_8X8();
    19bc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
					Disp_Array[0][0] = 1;
    19c0:	f8 01       	movw	r30, r16
    19c2:	d1 83       	std	Z+1, r29	; 0x01
    19c4:	c0 83       	st	Z, r28
					update_Disp();
    19c6:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z11update_Dispv>
					if (!(PINC & Player_04))
    19ca:	33 99       	sbic	0x06, 3	; 6
    19cc:	18 c0       	rjmp	.+48     	; 0x19fe <main+0x3ea>
					{
						USART_Transmit('L');			//Send "L" to RNG MCU to receive random number
    19ce:	8c e4       	ldi	r24, 0x4C	; 76
    19d0:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z14USART_Transmith>
						RND_number = USART_Receive();	//Set RND number to number received by RNG MCU
    19d4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_Z13USART_Receivev>
    19d8:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
						disp_seg(RND_number);
    19dc:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z8disp_segc>
    19e0:	ff ef       	ldi	r31, 0xFF	; 255
    19e2:	29 e6       	ldi	r18, 0x69	; 105
    19e4:	88 e1       	ldi	r24, 0x18	; 24
    19e6:	f1 50       	subi	r31, 0x01	; 1
    19e8:	20 40       	sbci	r18, 0x00	; 0
    19ea:	80 40       	sbci	r24, 0x00	; 0
    19ec:	e1 f7       	brne	.-8      	; 0x19e6 <main+0x3d2>
    19ee:	00 c0       	rjmp	.+0      	; 0x19f0 <main+0x3dc>
    19f0:	00 00       	nop
						_delay_ms(1000);
						MAX7219_clear_7SEG();
    19f2:	0e 94 32 01 	call	0x264	; 0x264 <_Z18MAX7219_clear_7SEGv>
						playerD(set_number());
    19f6:	0e 94 15 07 	call	0xe2a	; 0xe2a <_Z10set_numberv>
    19fa:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z7playerDi>
					}
					Disp_Array[0][0] = 0;
    19fe:	f8 01       	movw	r30, r16
    1a00:	11 82       	std	Z+1, r1	; 0x01
    1a02:	10 82       	st	Z, r1
					MAX7219_clear_8X8();
    1a04:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z17MAX7219_clear_8X8v>
					Disp_Array[7][0] = 0;
					MAX7219_clear_8X8();
				}
				
				
				while (chance == 'D')		//When the chance is to player 04
    1a08:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <chance>
    1a0c:	84 34       	cpi	r24, 0x44	; 68
    1a0e:	b1 f2       	breq	.-84     	; 0x19bc <main+0x3a8>
    1a10:	37 cf       	rjmp	.-402    	; 0x1880 <main+0x26c>
		
		
		//When game is over
		while (no_players == -1)
		{
				Animation();	//Display simple animation
    1a12:	0e 94 a5 05 	call	0xb4a	; 0xb4a <_Z9Animationv>
				Disp_winner();	//Display word Winner
    1a16:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_Z11Disp_winnerv>
				if (winner == 'A')
    1a1a:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <winner>
    1a1e:	81 34       	cpi	r24, 0x41	; 65
    1a20:	19 f4       	brne	.+6      	; 0x1a28 <main+0x414>
				{
					Disp_01();
    1a22:	0e 94 07 05 	call	0xa0e	; 0xa0e <_Z7Disp_01v>
    1a26:	0e c0       	rjmp	.+28     	; 0x1a44 <main+0x430>
				}
				else if (winner == 'B')
    1a28:	82 34       	cpi	r24, 0x42	; 66
    1a2a:	19 f4       	brne	.+6      	; 0x1a32 <main+0x41e>
				{
					Disp_02();
    1a2c:	0e 94 16 05 	call	0xa2c	; 0xa2c <_Z7Disp_02v>
    1a30:	09 c0       	rjmp	.+18     	; 0x1a44 <main+0x430>
				}
				else if (winner == 'C')
    1a32:	83 34       	cpi	r24, 0x43	; 67
    1a34:	19 f4       	brne	.+6      	; 0x1a3c <main+0x428>
				{
					Disp_03();
    1a36:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z7Disp_03v>
    1a3a:	04 c0       	rjmp	.+8      	; 0x1a44 <main+0x430>
				}
				else if (winner == 'D')
    1a3c:	84 34       	cpi	r24, 0x44	; 68
    1a3e:	11 f4       	brne	.+4      	; 0x1a44 <main+0x430>
				{
					Disp_04();
    1a40:	0e 94 3c 05 	call	0xa78	; 0xa78 <_Z7Disp_04v>
    1a44:	ff ef       	ldi	r31, 0xFF	; 255
    1a46:	2e e9       	ldi	r18, 0x9E	; 158
    1a48:	84 e2       	ldi	r24, 0x24	; 36
    1a4a:	f1 50       	subi	r31, 0x01	; 1
    1a4c:	20 40       	sbci	r18, 0x00	; 0
    1a4e:	80 40       	sbci	r24, 0x00	; 0
    1a50:	e1 f7       	brne	.-8      	; 0x1a4a <main+0x436>
    1a52:	00 c0       	rjmp	.+0      	; 0x1a54 <main+0x440>
    1a54:	00 00       	nop
			}
		}
		
		
		//When game is over
		while (no_players == -1)
    1a56:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <no_players>
    1a5a:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <no_players+0x1>
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	c1 f2       	breq	.-80     	; 0x1a12 <main+0x3fe>
    1a62:	fb cd       	rjmp	.-1034   	; 0x165a <main+0x46>

00001a64 <__vector_2>:
	}
}


ISR(INT1_vect)
{
    1a64:	1f 92       	push	r1
    1a66:	0f 92       	push	r0
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	0f 92       	push	r0
    1a6c:	11 24       	eor	r1, r1
    1a6e:	8f 93       	push	r24
    1a70:	9f 93       	push	r25
	//reset all variables
	no_players = -10;
    1a72:	86 ef       	ldi	r24, 0xF6	; 246
    1a74:	9f ef       	ldi	r25, 0xFF	; 255
    1a76:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <no_players+0x1>
    1a7a:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <no_players>
	chance = '0';
    1a7e:	80 e3       	ldi	r24, 0x30	; 48
    1a80:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <chance>
	onGame = false;
    1a84:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <onGame>
}
    1a88:	9f 91       	pop	r25
    1a8a:	8f 91       	pop	r24
    1a8c:	0f 90       	pop	r0
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	0f 90       	pop	r0
    1a92:	1f 90       	pop	r1
    1a94:	18 95       	reti

00001a96 <_exit>:
    1a96:	f8 94       	cli

00001a98 <__stop_program>:
    1a98:	ff cf       	rjmp	.-2      	; 0x1a98 <__stop_program>
